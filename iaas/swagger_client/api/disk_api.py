# coding: utf-8

"""
    VMware Cloud Assembly IaaS API

    A multi-cloud IaaS API for Cloud Automation Services  # noqa: E501

    OpenAPI spec version: 2019-01-15
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class DiskApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def attach_machine_disk(self, body, id, **kwargs):  # noqa: E501
        """Attach machine disk  # noqa: E501

        Attach a disk to a machine.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.attach_machine_disk(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DiskAttachmentSpecification body: Disk Specification instance (required)
        :param str id: The ID of the machine. (required)
        :param str api_version: The version of the API in yyyy-MM-dd format (UTC). For versioning information please refer to /iaas/api/about
        :return: BlockDevice
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.attach_machine_disk_with_http_info(body, id, **kwargs)  # noqa: E501
        else:
            (data) = self.attach_machine_disk_with_http_info(body, id, **kwargs)  # noqa: E501
            return data

    def attach_machine_disk_with_http_info(self, body, id, **kwargs):  # noqa: E501
        """Attach machine disk  # noqa: E501

        Attach a disk to a machine.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.attach_machine_disk_with_http_info(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DiskAttachmentSpecification body: Disk Specification instance (required)
        :param str id: The ID of the machine. (required)
        :param str api_version: The version of the API in yyyy-MM-dd format (UTC). For versioning information please refer to /iaas/api/about
        :return: BlockDevice
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'id', 'api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method attach_machine_disk" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `attach_machine_disk`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `attach_machine_disk`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'api_version' in params:
            query_params.append(('apiVersion', params['api_version']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'app/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/iaas/api/machines/{id}/disks', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BlockDevice',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_block_device(self, body, **kwargs):  # noqa: E501
        """Create BlockDevice  # noqa: E501

        Following disk custom properties can be passed while creating a block device:         1. dataStore: Defines name of the datastore in which the disk has to be provisioned.       2. storagePolicy: Defines name of the storage policy in which the disk has to be provisioned. If name of the datastore is specified in the custom properties then, datastore takes precedence.      3. provisioningType: Defines the type of provisioning. For eg. thick/thin.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_block_device(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BlockDeviceSpecification body: Disk Specification instance (required)
        :param str api_version: The version of the API in yyyy-MM-dd format (UTC). For versioning information please refer to /iaas/api/about
        :return: RequestTracker
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_block_device_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.create_block_device_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def create_block_device_with_http_info(self, body, **kwargs):  # noqa: E501
        """Create BlockDevice  # noqa: E501

        Following disk custom properties can be passed while creating a block device:         1. dataStore: Defines name of the datastore in which the disk has to be provisioned.       2. storagePolicy: Defines name of the storage policy in which the disk has to be provisioned. If name of the datastore is specified in the custom properties then, datastore takes precedence.      3. provisioningType: Defines the type of provisioning. For eg. thick/thin.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_block_device_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param BlockDeviceSpecification body: Disk Specification instance (required)
        :param str api_version: The version of the API in yyyy-MM-dd format (UTC). For versioning information please refer to /iaas/api/about
        :return: RequestTracker
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_block_device" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_block_device`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'api_version' in params:
            query_params.append(('apiVersion', params['api_version']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'app/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/iaas/api/block-devices', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RequestTracker',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_block_device(self, id, **kwargs):  # noqa: E501
        """Delete a BlockDevice  # noqa: E501

        Delete a BlockDevice  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_block_device(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The ID of the block device. (required)
        :param str api_version: The version of the API in yyyy-MM-dd format (UTC). For versioning information please refer to /iaas/api/about
        :return: RequestTracker
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_block_device_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_block_device_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def delete_block_device_with_http_info(self, id, **kwargs):  # noqa: E501
        """Delete a BlockDevice  # noqa: E501

        Delete a BlockDevice  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_block_device_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The ID of the block device. (required)
        :param str api_version: The version of the API in yyyy-MM-dd format (UTC). For versioning information please refer to /iaas/api/about
        :return: RequestTracker
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_block_device" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `delete_block_device`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'api_version' in params:
            query_params.append(('apiVersion', params['api_version']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'app/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/iaas/api/block-devices/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RequestTracker',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_machine_disk(self, id, id1, **kwargs):  # noqa: E501
        """Delete machine disk  # noqa: E501

        Remove a disk from a given machine.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_machine_disk(id, id1, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The ID of the machine. (required)
        :param str id1: The ID of the disk. (required)
        :param str api_version: The version of the API in yyyy-MM-dd format (UTC). For versioning information please refer to /iaas/api/about
        :return: BlockDevice
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_machine_disk_with_http_info(id, id1, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_machine_disk_with_http_info(id, id1, **kwargs)  # noqa: E501
            return data

    def delete_machine_disk_with_http_info(self, id, id1, **kwargs):  # noqa: E501
        """Delete machine disk  # noqa: E501

        Remove a disk from a given machine.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_machine_disk_with_http_info(id, id1, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The ID of the machine. (required)
        :param str id1: The ID of the disk. (required)
        :param str api_version: The version of the API in yyyy-MM-dd format (UTC). For versioning information please refer to /iaas/api/about
        :return: BlockDevice
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'id1', 'api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_machine_disk" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `delete_machine_disk`")  # noqa: E501
        # verify the required parameter 'id1' is set
        if ('id1' not in params or
                params['id1'] is None):
            raise ValueError("Missing the required parameter `id1` when calling `delete_machine_disk`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'id1' in params:
            path_params['id1'] = params['id1']  # noqa: E501

        query_params = []
        if 'api_version' in params:
            query_params.append(('apiVersion', params['api_version']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/iaas/api/machines/{id}/disks/{id1}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BlockDevice',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_block_device(self, id, **kwargs):  # noqa: E501
        """Get BlockDevice  # noqa: E501

        Get a single BlockDevice  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_block_device(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The ID of the block device. (required)
        :param str api_version: The version of the API in yyyy-MM-dd format (UTC). For versioning information please refer to /iaas/api/about
        :return: BlockDevice
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_block_device_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_block_device_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_block_device_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get BlockDevice  # noqa: E501

        Get a single BlockDevice  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_block_device_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The ID of the block device. (required)
        :param str api_version: The version of the API in yyyy-MM-dd format (UTC). For versioning information please refer to /iaas/api/about
        :return: BlockDevice
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_block_device" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_block_device`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'api_version' in params:
            query_params.append(('apiVersion', params['api_version']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'app/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/iaas/api/block-devices/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BlockDevice',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_block_devices(self, **kwargs):  # noqa: E501
        """Get BlockDevices  # noqa: E501

        Get all BlockDevices  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_block_devices(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_version: The version of the API in yyyy-MM-dd format (UTC). For versioning information please refer to /iaas/api/about
        :return: BlockDeviceResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_block_devices_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_block_devices_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_block_devices_with_http_info(self, **kwargs):  # noqa: E501
        """Get BlockDevices  # noqa: E501

        Get all BlockDevices  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_block_devices_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_version: The version of the API in yyyy-MM-dd format (UTC). For versioning information please refer to /iaas/api/about
        :return: BlockDeviceResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_block_devices" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'api_version' in params:
            query_params.append(('apiVersion', params['api_version']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'app/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/iaas/api/block-devices', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BlockDeviceResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_machine_disk(self, id, id1, **kwargs):  # noqa: E501
        """Get a machine disk  # noqa: E501

        Get disk with a given id for specific machine  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_machine_disk(id, id1, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The ID of the machine. (required)
        :param str id1: The ID of the disk. (required)
        :param str api_version: The version of the API in yyyy-MM-dd format (UTC). For versioning information please refer to /iaas/api/about
        :return: BlockDevice
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_machine_disk_with_http_info(id, id1, **kwargs)  # noqa: E501
        else:
            (data) = self.get_machine_disk_with_http_info(id, id1, **kwargs)  # noqa: E501
            return data

    def get_machine_disk_with_http_info(self, id, id1, **kwargs):  # noqa: E501
        """Get a machine disk  # noqa: E501

        Get disk with a given id for specific machine  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_machine_disk_with_http_info(id, id1, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The ID of the machine. (required)
        :param str id1: The ID of the disk. (required)
        :param str api_version: The version of the API in yyyy-MM-dd format (UTC). For versioning information please refer to /iaas/api/about
        :return: BlockDevice
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'id1', 'api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_machine_disk" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_machine_disk`")  # noqa: E501
        # verify the required parameter 'id1' is set
        if ('id1' not in params or
                params['id1'] is None):
            raise ValueError("Missing the required parameter `id1` when calling `get_machine_disk`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'id1' in params:
            path_params['id1'] = params['id1']  # noqa: E501

        query_params = []
        if 'api_version' in params:
            query_params.append(('apiVersion', params['api_version']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/iaas/api/machines/{id}/disks/{id1}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BlockDevice',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_machine_disks(self, id, **kwargs):  # noqa: E501
        """Get machine disks  # noqa: E501

        Get all machine disks  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_machine_disks(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The ID of the machine. (required)
        :param str api_version: The version of the API in yyyy-MM-dd format (UTC). For versioning information please refer to /iaas/api/about
        :return: BlockDeviceResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_machine_disks_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_machine_disks_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_machine_disks_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get machine disks  # noqa: E501

        Get all machine disks  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_machine_disks_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The ID of the machine. (required)
        :param str api_version: The version of the API in yyyy-MM-dd format (UTC). For versioning information please refer to /iaas/api/about
        :return: BlockDeviceResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_machine_disks" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_machine_disks`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'api_version' in params:
            query_params.append(('apiVersion', params['api_version']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/iaas/api/machines/{id}/disks', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BlockDeviceResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
