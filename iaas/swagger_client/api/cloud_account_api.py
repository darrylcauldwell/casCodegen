# coding: utf-8

"""
    VMware Cloud Assembly IaaS API

    A multi-cloud IaaS API for Cloud Automation Services  # noqa: E501

    OpenAPI spec version: 2019-01-15
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class CloudAccountApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_aws_cloud_account(self, body, **kwargs):  # noqa: E501
        """Create an AWS cloud account  # noqa: E501

        Create an AWS cloud account in the current organization  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_aws_cloud_account(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CloudAccountAwsSpecification body: CloudAccountAws specification (required)
        :param str api_version: The version of the API in yyyy-MM-dd format (UTC). For versioning information please refer to /iaas/api/about
        :return: CloudAccountAws
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_aws_cloud_account_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.create_aws_cloud_account_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def create_aws_cloud_account_with_http_info(self, body, **kwargs):  # noqa: E501
        """Create an AWS cloud account  # noqa: E501

        Create an AWS cloud account in the current organization  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_aws_cloud_account_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CloudAccountAwsSpecification body: CloudAccountAws specification (required)
        :param str api_version: The version of the API in yyyy-MM-dd format (UTC). For versioning information please refer to /iaas/api/about
        :return: CloudAccountAws
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_aws_cloud_account" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_aws_cloud_account`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'api_version' in params:
            query_params.append(('apiVersion', params['api_version']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'app/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/iaas/api/cloud-accounts-aws', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CloudAccountAws',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_azure_cloud_account(self, body, **kwargs):  # noqa: E501
        """Create an Azure cloud account  # noqa: E501

        Create an Azure cloud account in the current organization  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_azure_cloud_account(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CloudAccountAzureSpecification body: CloudAccountAzure specification (required)
        :param str api_version: The version of the API in yyyy-MM-dd format (UTC). For versioning information please refer to /iaas/api/about
        :return: CloudAccountAzure
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_azure_cloud_account_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.create_azure_cloud_account_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def create_azure_cloud_account_with_http_info(self, body, **kwargs):  # noqa: E501
        """Create an Azure cloud account  # noqa: E501

        Create an Azure cloud account in the current organization  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_azure_cloud_account_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CloudAccountAzureSpecification body: CloudAccountAzure specification (required)
        :param str api_version: The version of the API in yyyy-MM-dd format (UTC). For versioning information please refer to /iaas/api/about
        :return: CloudAccountAzure
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_azure_cloud_account" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_azure_cloud_account`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'api_version' in params:
            query_params.append(('apiVersion', params['api_version']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'app/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/iaas/api/cloud-accounts-azure', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CloudAccountAzure',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_cloud_account(self, body, **kwargs):  # noqa: E501
        """Create a cloud account  # noqa: E501

        Create a cloud account in the current organization  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_cloud_account(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CloudAccountSpecification body: CloudAccount instance (required)
        :param str api_version: The version of the API in yyyy-MM-dd format (UTC). For versioning information please refer to /iaas/api/about
        :return: CloudAccount
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_cloud_account_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.create_cloud_account_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def create_cloud_account_with_http_info(self, body, **kwargs):  # noqa: E501
        """Create a cloud account  # noqa: E501

        Create a cloud account in the current organization  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_cloud_account_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CloudAccountSpecification body: CloudAccount instance (required)
        :param str api_version: The version of the API in yyyy-MM-dd format (UTC). For versioning information please refer to /iaas/api/about
        :return: CloudAccount
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_cloud_account" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_cloud_account`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'api_version' in params:
            query_params.append(('apiVersion', params['api_version']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'app/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/iaas/api/cloud-accounts', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CloudAccount',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_gcp_cloud_account(self, body, **kwargs):  # noqa: E501
        """Create an GCP cloud account  # noqa: E501

        Create an GCP cloud account in the current organization  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_gcp_cloud_account(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CloudAccountGcpSpecification body: CloudAccountGcp specification (required)
        :param str api_version: The version of the API in yyyy-MM-dd format (UTC). For versioning information please refer to /iaas/api/about
        :return: CloudAccountGcp
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_gcp_cloud_account_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.create_gcp_cloud_account_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def create_gcp_cloud_account_with_http_info(self, body, **kwargs):  # noqa: E501
        """Create an GCP cloud account  # noqa: E501

        Create an GCP cloud account in the current organization  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_gcp_cloud_account_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CloudAccountGcpSpecification body: CloudAccountGcp specification (required)
        :param str api_version: The version of the API in yyyy-MM-dd format (UTC). For versioning information please refer to /iaas/api/about
        :return: CloudAccountGcp
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_gcp_cloud_account" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_gcp_cloud_account`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'api_version' in params:
            query_params.append(('apiVersion', params['api_version']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'app/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/iaas/api/cloud-accounts-gcp', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CloudAccountGcp',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_nsx_t_cloud_account(self, body, **kwargs):  # noqa: E501
        """Create a NSX-T cloud account  # noqa: E501

        Create a NSX-T cloud account in the current organization  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_nsx_t_cloud_account(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CloudAccountNsxTSpecification body: CloudAccountNsxT specification (required)
        :param str api_version: The version of the API in yyyy-MM-dd format (UTC). For versioning information please refer to /iaas/api/about
        :return: CloudAccountNsxT
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_nsx_t_cloud_account_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.create_nsx_t_cloud_account_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def create_nsx_t_cloud_account_with_http_info(self, body, **kwargs):  # noqa: E501
        """Create a NSX-T cloud account  # noqa: E501

        Create a NSX-T cloud account in the current organization  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_nsx_t_cloud_account_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CloudAccountNsxTSpecification body: CloudAccountNsxT specification (required)
        :param str api_version: The version of the API in yyyy-MM-dd format (UTC). For versioning information please refer to /iaas/api/about
        :return: CloudAccountNsxT
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_nsx_t_cloud_account" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_nsx_t_cloud_account`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'api_version' in params:
            query_params.append(('apiVersion', params['api_version']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'app/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/iaas/api/cloud-accounts-nsx-t', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CloudAccountNsxT',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_nsx_v_cloud_account(self, body, **kwargs):  # noqa: E501
        """Create a NSX-V cloud account  # noqa: E501

        Create a NSX-V cloud account within the current organization  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_nsx_v_cloud_account(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CloudAccountNsxVSpecification body: CloudAccountNsxV specification (required)
        :param str api_version: The version of the API in yyyy-MM-dd format (UTC). For versioning information please refer to /iaas/api/about
        :return: CloudAccountNsxV
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_nsx_v_cloud_account_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.create_nsx_v_cloud_account_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def create_nsx_v_cloud_account_with_http_info(self, body, **kwargs):  # noqa: E501
        """Create a NSX-V cloud account  # noqa: E501

        Create a NSX-V cloud account within the current organization  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_nsx_v_cloud_account_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CloudAccountNsxVSpecification body: CloudAccountNsxV specification (required)
        :param str api_version: The version of the API in yyyy-MM-dd format (UTC). For versioning information please refer to /iaas/api/about
        :return: CloudAccountNsxV
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_nsx_v_cloud_account" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_nsx_v_cloud_account`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'api_version' in params:
            query_params.append(('apiVersion', params['api_version']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'app/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/iaas/api/cloud-accounts-nsx-v', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CloudAccountNsxV',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_v_sphere_cloud_account(self, body, **kwargs):  # noqa: E501
        """Create a vSphere cloud account  # noqa: E501

        Create a vSphere cloud account within the current organization  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_v_sphere_cloud_account(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CloudAccountVsphereSpecification body: CloudAccountVsphere specification (required)
        :param str api_version: The version of the API in yyyy-MM-dd format (UTC). For versioning information please refer to /iaas/api/about
        :return: CloudAccountVsphere
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_v_sphere_cloud_account_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.create_v_sphere_cloud_account_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def create_v_sphere_cloud_account_with_http_info(self, body, **kwargs):  # noqa: E501
        """Create a vSphere cloud account  # noqa: E501

        Create a vSphere cloud account within the current organization  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_v_sphere_cloud_account_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CloudAccountVsphereSpecification body: CloudAccountVsphere specification (required)
        :param str api_version: The version of the API in yyyy-MM-dd format (UTC). For versioning information please refer to /iaas/api/about
        :return: CloudAccountVsphere
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_v_sphere_cloud_account" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_v_sphere_cloud_account`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'api_version' in params:
            query_params.append(('apiVersion', params['api_version']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'app/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/iaas/api/cloud-accounts-vsphere', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CloudAccountVsphere',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_aws_cloud_account(self, id, **kwargs):  # noqa: E501
        """Delete an AWS cloud account  # noqa: E501

        Delete an AWS cloud account with a given id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_aws_cloud_account(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The ID of the Cloud Account (required)
        :param str api_version: The version of the API in yyyy-MM-dd format (UTC). For versioning information please refer to /iaas/api/about
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_aws_cloud_account_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_aws_cloud_account_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def delete_aws_cloud_account_with_http_info(self, id, **kwargs):  # noqa: E501
        """Delete an AWS cloud account  # noqa: E501

        Delete an AWS cloud account with a given id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_aws_cloud_account_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The ID of the Cloud Account (required)
        :param str api_version: The version of the API in yyyy-MM-dd format (UTC). For versioning information please refer to /iaas/api/about
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_aws_cloud_account" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `delete_aws_cloud_account`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'api_version' in params:
            query_params.append(('apiVersion', params['api_version']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/iaas/api/cloud-accounts-aws/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_azure_cloud_account(self, id, **kwargs):  # noqa: E501
        """Delete an Azure Cloud Account  # noqa: E501

        Delete an Azure Cloud Account with a given id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_azure_cloud_account(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The ID of the Cloud Account (required)
        :param str api_version: The version of the API in yyyy-MM-dd format (UTC). For versioning information please refer to /iaas/api/about
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_azure_cloud_account_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_azure_cloud_account_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def delete_azure_cloud_account_with_http_info(self, id, **kwargs):  # noqa: E501
        """Delete an Azure Cloud Account  # noqa: E501

        Delete an Azure Cloud Account with a given id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_azure_cloud_account_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The ID of the Cloud Account (required)
        :param str api_version: The version of the API in yyyy-MM-dd format (UTC). For versioning information please refer to /iaas/api/about
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_azure_cloud_account" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `delete_azure_cloud_account`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'api_version' in params:
            query_params.append(('apiVersion', params['api_version']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/iaas/api/cloud-accounts-azure/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_cloud_account(self, id, **kwargs):  # noqa: E501
        """Delete a cloud account  # noqa: E501

        Delete a cloud account with a given id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_cloud_account(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The ID of the Cloud Account (required)
        :param str api_version: The version of the API in yyyy-MM-dd format (UTC). For versioning information please refer to /iaas/api/about
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_cloud_account_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_cloud_account_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def delete_cloud_account_with_http_info(self, id, **kwargs):  # noqa: E501
        """Delete a cloud account  # noqa: E501

        Delete a cloud account with a given id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_cloud_account_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The ID of the Cloud Account (required)
        :param str api_version: The version of the API in yyyy-MM-dd format (UTC). For versioning information please refer to /iaas/api/about
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_cloud_account" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `delete_cloud_account`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'api_version' in params:
            query_params.append(('apiVersion', params['api_version']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/iaas/api/cloud-accounts/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_cloud_account_nsx_t(self, id, **kwargs):  # noqa: E501
        """Delete a NSX-T cloud account  # noqa: E501

        Delete a NSX-T cloud account with a given id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_cloud_account_nsx_t(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The ID of the Cloud Account (required)
        :param str api_version: The version of the API in yyyy-MM-dd format (UTC). For versioning information please refer to /iaas/api/about
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_cloud_account_nsx_t_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_cloud_account_nsx_t_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def delete_cloud_account_nsx_t_with_http_info(self, id, **kwargs):  # noqa: E501
        """Delete a NSX-T cloud account  # noqa: E501

        Delete a NSX-T cloud account with a given id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_cloud_account_nsx_t_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The ID of the Cloud Account (required)
        :param str api_version: The version of the API in yyyy-MM-dd format (UTC). For versioning information please refer to /iaas/api/about
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_cloud_account_nsx_t" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `delete_cloud_account_nsx_t`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'api_version' in params:
            query_params.append(('apiVersion', params['api_version']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/iaas/api/cloud-accounts-nsx-t/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_cloud_account_nsx_v(self, id, **kwargs):  # noqa: E501
        """Delete a NSV-V cloud account  # noqa: E501

        Delete a NSV-V cloud account with a given id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_cloud_account_nsx_v(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The ID of the Cloud Account (required)
        :param str api_version: The version of the API in yyyy-MM-dd format (UTC). For versioning information please refer to /iaas/api/about
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_cloud_account_nsx_v_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_cloud_account_nsx_v_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def delete_cloud_account_nsx_v_with_http_info(self, id, **kwargs):  # noqa: E501
        """Delete a NSV-V cloud account  # noqa: E501

        Delete a NSV-V cloud account with a given id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_cloud_account_nsx_v_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The ID of the Cloud Account (required)
        :param str api_version: The version of the API in yyyy-MM-dd format (UTC). For versioning information please refer to /iaas/api/about
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_cloud_account_nsx_v" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `delete_cloud_account_nsx_v`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'api_version' in params:
            query_params.append(('apiVersion', params['api_version']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/iaas/api/cloud-accounts-nsx-v/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_gcp_cloud_account(self, id, **kwargs):  # noqa: E501
        """Delete an GCP cloud account  # noqa: E501

        Delete an GCP cloud account with a given id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_gcp_cloud_account(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The ID of the Cloud Account (required)
        :param str api_version: The version of the API in yyyy-MM-dd format (UTC). For versioning information please refer to /iaas/api/about
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_gcp_cloud_account_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_gcp_cloud_account_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def delete_gcp_cloud_account_with_http_info(self, id, **kwargs):  # noqa: E501
        """Delete an GCP cloud account  # noqa: E501

        Delete an GCP cloud account with a given id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_gcp_cloud_account_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The ID of the Cloud Account (required)
        :param str api_version: The version of the API in yyyy-MM-dd format (UTC). For versioning information please refer to /iaas/api/about
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_gcp_cloud_account" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `delete_gcp_cloud_account`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'api_version' in params:
            query_params.append(('apiVersion', params['api_version']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/iaas/api/cloud-accounts-gcp/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_v_sphere_cloud_account(self, id, **kwargs):  # noqa: E501
        """Delete a vSphere cloud account  # noqa: E501

        Delete a vSphere Cloud Account with a given id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_v_sphere_cloud_account(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The ID of the Cloud Account (required)
        :param str api_version: The version of the API in yyyy-MM-dd format (UTC). For versioning information please refer to /iaas/api/about
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_v_sphere_cloud_account_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_v_sphere_cloud_account_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def delete_v_sphere_cloud_account_with_http_info(self, id, **kwargs):  # noqa: E501
        """Delete a vSphere cloud account  # noqa: E501

        Delete a vSphere Cloud Account with a given id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_v_sphere_cloud_account_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The ID of the Cloud Account (required)
        :param str api_version: The version of the API in yyyy-MM-dd format (UTC). For versioning information please refer to /iaas/api/about
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_v_sphere_cloud_account" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `delete_v_sphere_cloud_account`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'api_version' in params:
            query_params.append(('apiVersion', params['api_version']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/iaas/api/cloud-accounts-vsphere/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def enumerate_aws_regions(self, body, **kwargs):  # noqa: E501
        """Get the available regions for specified AWS cloud account  # noqa: E501

        Get the available regions for specified AWS cloud account  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.enumerate_aws_regions(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CloudAccountAwsSpecification body: CloudAccount specification (required)
        :param str api_version: The version of the API in yyyy-MM-dd format (UTC). For versioning information please refer to /iaas/api/about
        :return: CloudAccountRegions
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.enumerate_aws_regions_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.enumerate_aws_regions_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def enumerate_aws_regions_with_http_info(self, body, **kwargs):  # noqa: E501
        """Get the available regions for specified AWS cloud account  # noqa: E501

        Get the available regions for specified AWS cloud account  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.enumerate_aws_regions_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CloudAccountAwsSpecification body: CloudAccount specification (required)
        :param str api_version: The version of the API in yyyy-MM-dd format (UTC). For versioning information please refer to /iaas/api/about
        :return: CloudAccountRegions
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method enumerate_aws_regions" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `enumerate_aws_regions`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'api_version' in params:
            query_params.append(('apiVersion', params['api_version']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'app/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/iaas/api/cloud-accounts-aws/region-enumeration', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CloudAccountRegions',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def enumerate_azure_regions(self, body, **kwargs):  # noqa: E501
        """Get the available regions for specified Azure cloud account  # noqa: E501

        Get the available regions for specified Azure cloud account  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.enumerate_azure_regions(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CloudAccountAzureSpecification body: CloudAccountAzure specification (required)
        :param str api_version: The version of the API in yyyy-MM-dd format (UTC). For versioning information please refer to /iaas/api/about
        :return: CloudAccountRegions
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.enumerate_azure_regions_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.enumerate_azure_regions_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def enumerate_azure_regions_with_http_info(self, body, **kwargs):  # noqa: E501
        """Get the available regions for specified Azure cloud account  # noqa: E501

        Get the available regions for specified Azure cloud account  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.enumerate_azure_regions_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CloudAccountAzureSpecification body: CloudAccountAzure specification (required)
        :param str api_version: The version of the API in yyyy-MM-dd format (UTC). For versioning information please refer to /iaas/api/about
        :return: CloudAccountRegions
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method enumerate_azure_regions" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `enumerate_azure_regions`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'api_version' in params:
            query_params.append(('apiVersion', params['api_version']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'app/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/iaas/api/cloud-accounts-azure/region-enumeration', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CloudAccountRegions',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def enumerate_gcp_regions(self, body, **kwargs):  # noqa: E501
        """Get the available regions for specified GCP cloud account  # noqa: E501

        Get the available regions for specified GCP cloud account  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.enumerate_gcp_regions(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CloudAccountGcpSpecification body: CloudAccount specification (required)
        :param str api_version: The version of the API in yyyy-MM-dd format (UTC). For versioning information please refer to /iaas/api/about
        :return: CloudAccountRegions
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.enumerate_gcp_regions_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.enumerate_gcp_regions_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def enumerate_gcp_regions_with_http_info(self, body, **kwargs):  # noqa: E501
        """Get the available regions for specified GCP cloud account  # noqa: E501

        Get the available regions for specified GCP cloud account  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.enumerate_gcp_regions_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CloudAccountGcpSpecification body: CloudAccount specification (required)
        :param str api_version: The version of the API in yyyy-MM-dd format (UTC). For versioning information please refer to /iaas/api/about
        :return: CloudAccountRegions
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method enumerate_gcp_regions" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `enumerate_gcp_regions`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'api_version' in params:
            query_params.append(('apiVersion', params['api_version']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'app/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/iaas/api/cloud-accounts-gcp/region-enumeration', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CloudAccountRegions',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def enumerate_regions(self, body, **kwargs):  # noqa: E501
        """Get the available regions for specified cloud account  # noqa: E501

        Get the available regions for specified cloud account  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.enumerate_regions(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CloudAccountSpecification body: CloudAccount instance (required)
        :param str api_version: The version of the API in yyyy-MM-dd format (UTC). For versioning information please refer to /iaas/api/about
        :return: CloudAccountRegions
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.enumerate_regions_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.enumerate_regions_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def enumerate_regions_with_http_info(self, body, **kwargs):  # noqa: E501
        """Get the available regions for specified cloud account  # noqa: E501

        Get the available regions for specified cloud account  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.enumerate_regions_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CloudAccountSpecification body: CloudAccount instance (required)
        :param str api_version: The version of the API in yyyy-MM-dd format (UTC). For versioning information please refer to /iaas/api/about
        :return: CloudAccountRegions
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method enumerate_regions" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `enumerate_regions`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'api_version' in params:
            query_params.append(('apiVersion', params['api_version']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'app/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/iaas/api/cloud-accounts/region-enumeration', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CloudAccountRegions',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def enumerate_v_sphere_regions(self, body, **kwargs):  # noqa: E501
        """Get the available regions for specified vSphere cloud account  # noqa: E501

        Get the available regions for specified vSphere cloud account  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.enumerate_v_sphere_regions(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CloudAccountVsphereSpecification body: CloudAccountVsphere specification (required)
        :param str api_version: The version of the API in yyyy-MM-dd format (UTC). For versioning information please refer to /iaas/api/about
        :return: CloudAccountRegions
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.enumerate_v_sphere_regions_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.enumerate_v_sphere_regions_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def enumerate_v_sphere_regions_with_http_info(self, body, **kwargs):  # noqa: E501
        """Get the available regions for specified vSphere cloud account  # noqa: E501

        Get the available regions for specified vSphere cloud account  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.enumerate_v_sphere_regions_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CloudAccountVsphereSpecification body: CloudAccountVsphere specification (required)
        :param str api_version: The version of the API in yyyy-MM-dd format (UTC). For versioning information please refer to /iaas/api/about
        :return: CloudAccountRegions
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method enumerate_v_sphere_regions" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `enumerate_v_sphere_regions`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'api_version' in params:
            query_params.append(('apiVersion', params['api_version']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'app/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/iaas/api/cloud-accounts-vsphere/region-enumeration', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CloudAccountRegions',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_aws_cloud_account(self, id, **kwargs):  # noqa: E501
        """Get an AWS cloud account  # noqa: E501

        Get an AWS cloud account with a given id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_aws_cloud_account(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The ID of the Cloud Account (required)
        :param str api_version: The version of the API in yyyy-MM-dd format (UTC). For versioning information please refer to /iaas/api/about
        :return: CloudAccountAws
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_aws_cloud_account_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_aws_cloud_account_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_aws_cloud_account_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get an AWS cloud account  # noqa: E501

        Get an AWS cloud account with a given id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_aws_cloud_account_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The ID of the Cloud Account (required)
        :param str api_version: The version of the API in yyyy-MM-dd format (UTC). For versioning information please refer to /iaas/api/about
        :return: CloudAccountAws
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_aws_cloud_account" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_aws_cloud_account`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'api_version' in params:
            query_params.append(('apiVersion', params['api_version']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'app/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/iaas/api/cloud-accounts-aws/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CloudAccountAws',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_aws_cloud_accounts(self, **kwargs):  # noqa: E501
        """Get AWS cloud accounts  # noqa: E501

        Get all AWS cloud accounts within the current organization  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_aws_cloud_accounts(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_version: The version of the API in yyyy-MM-dd format (UTC). For versioning information please refer to /iaas/api/about
        :return: CloudAccountAwsResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_aws_cloud_accounts_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_aws_cloud_accounts_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_aws_cloud_accounts_with_http_info(self, **kwargs):  # noqa: E501
        """Get AWS cloud accounts  # noqa: E501

        Get all AWS cloud accounts within the current organization  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_aws_cloud_accounts_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_version: The version of the API in yyyy-MM-dd format (UTC). For versioning information please refer to /iaas/api/about
        :return: CloudAccountAwsResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_aws_cloud_accounts" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'api_version' in params:
            query_params.append(('apiVersion', params['api_version']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'app/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/iaas/api/cloud-accounts-aws', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CloudAccountAwsResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_azure_cloud_account(self, id, **kwargs):  # noqa: E501
        """Get an Azure Cloud Account  # noqa: E501

        Get an Azure Cloud Account with a given id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_azure_cloud_account(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The ID of the Cloud Account (required)
        :param str api_version: The version of the API in yyyy-MM-dd format (UTC). For versioning information please refer to /iaas/api/about
        :return: CloudAccountAzure
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_azure_cloud_account_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_azure_cloud_account_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_azure_cloud_account_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get an Azure Cloud Account  # noqa: E501

        Get an Azure Cloud Account with a given id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_azure_cloud_account_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The ID of the Cloud Account (required)
        :param str api_version: The version of the API in yyyy-MM-dd format (UTC). For versioning information please refer to /iaas/api/about
        :return: CloudAccountAzure
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_azure_cloud_account" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_azure_cloud_account`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'api_version' in params:
            query_params.append(('apiVersion', params['api_version']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'app/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/iaas/api/cloud-accounts-azure/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CloudAccountAzure',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_azure_cloud_accounts(self, **kwargs):  # noqa: E501
        """Get Azure cloud accounts  # noqa: E501

        Get all Azure cloud accounts within the current organization  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_azure_cloud_accounts(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_version: The version of the API in yyyy-MM-dd format (UTC). For versioning information please refer to /iaas/api/about
        :return: CloudAccountAzureResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_azure_cloud_accounts_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_azure_cloud_accounts_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_azure_cloud_accounts_with_http_info(self, **kwargs):  # noqa: E501
        """Get Azure cloud accounts  # noqa: E501

        Get all Azure cloud accounts within the current organization  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_azure_cloud_accounts_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_version: The version of the API in yyyy-MM-dd format (UTC). For versioning information please refer to /iaas/api/about
        :return: CloudAccountAzureResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_azure_cloud_accounts" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'api_version' in params:
            query_params.append(('apiVersion', params['api_version']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'app/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/iaas/api/cloud-accounts-azure', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CloudAccountAzureResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_cloud_account(self, id, **kwargs):  # noqa: E501
        """Get cloud account  # noqa: E501

        Get cloud account with a given id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_cloud_account(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The ID of the Cloud Account (required)
        :param str api_version: The version of the API in yyyy-MM-dd format (UTC). For versioning information please refer to /iaas/api/about
        :return: CloudAccount
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_cloud_account_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_cloud_account_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_cloud_account_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get cloud account  # noqa: E501

        Get cloud account with a given id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_cloud_account_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The ID of the Cloud Account (required)
        :param str api_version: The version of the API in yyyy-MM-dd format (UTC). For versioning information please refer to /iaas/api/about
        :return: CloudAccount
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_cloud_account" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_cloud_account`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'api_version' in params:
            query_params.append(('apiVersion', params['api_version']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'app/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/iaas/api/cloud-accounts/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CloudAccount',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_cloud_accounts(self, **kwargs):  # noqa: E501
        """Get cloud accounts  # noqa: E501

        Get all cloud accounts within the current organization  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_cloud_accounts(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_version: The version of the API in yyyy-MM-dd format (UTC). For versioning information please refer to /iaas/api/about
        :return: CloudAccountResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_cloud_accounts_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_cloud_accounts_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_cloud_accounts_with_http_info(self, **kwargs):  # noqa: E501
        """Get cloud accounts  # noqa: E501

        Get all cloud accounts within the current organization  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_cloud_accounts_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_version: The version of the API in yyyy-MM-dd format (UTC). For versioning information please refer to /iaas/api/about
        :return: CloudAccountResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_cloud_accounts" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'api_version' in params:
            query_params.append(('apiVersion', params['api_version']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'app/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/iaas/api/cloud-accounts', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CloudAccountResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_gcp_cloud_account(self, id, **kwargs):  # noqa: E501
        """Get an GCP cloud account  # noqa: E501

        Get an GCP cloud account with a given id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_gcp_cloud_account(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The ID of the Cloud Account (required)
        :param str api_version: The version of the API in yyyy-MM-dd format (UTC). For versioning information please refer to /iaas/api/about
        :return: CloudAccountGcp
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_gcp_cloud_account_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_gcp_cloud_account_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_gcp_cloud_account_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get an GCP cloud account  # noqa: E501

        Get an GCP cloud account with a given id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_gcp_cloud_account_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The ID of the Cloud Account (required)
        :param str api_version: The version of the API in yyyy-MM-dd format (UTC). For versioning information please refer to /iaas/api/about
        :return: CloudAccountGcp
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_gcp_cloud_account" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_gcp_cloud_account`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'api_version' in params:
            query_params.append(('apiVersion', params['api_version']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'app/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/iaas/api/cloud-accounts-gcp/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CloudAccountGcp',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_gcp_cloud_accounts(self, **kwargs):  # noqa: E501
        """Get GCP cloud accounts  # noqa: E501

        Get all GCP cloud accounts within the current organization  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_gcp_cloud_accounts(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_version: The version of the API in yyyy-MM-dd format (UTC). For versioning information please refer to /iaas/api/about
        :return: CloudAccountGcpResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_gcp_cloud_accounts_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_gcp_cloud_accounts_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_gcp_cloud_accounts_with_http_info(self, **kwargs):  # noqa: E501
        """Get GCP cloud accounts  # noqa: E501

        Get all GCP cloud accounts within the current organization  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_gcp_cloud_accounts_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_version: The version of the API in yyyy-MM-dd format (UTC). For versioning information please refer to /iaas/api/about
        :return: CloudAccountGcpResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_gcp_cloud_accounts" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'api_version' in params:
            query_params.append(('apiVersion', params['api_version']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'app/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/iaas/api/cloud-accounts-gcp', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CloudAccountGcpResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_nsx_t_cloud_account(self, id, **kwargs):  # noqa: E501
        """Get an NSX-T cloud account  # noqa: E501

        Get an NSX-T cloud account with a given id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_nsx_t_cloud_account(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The ID of the Cloud Account (required)
        :param str api_version: The version of the API in yyyy-MM-dd format (UTC). For versioning information please refer to /iaas/api/about
        :return: CloudAccountNsxT
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_nsx_t_cloud_account_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_nsx_t_cloud_account_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_nsx_t_cloud_account_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get an NSX-T cloud account  # noqa: E501

        Get an NSX-T cloud account with a given id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_nsx_t_cloud_account_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The ID of the Cloud Account (required)
        :param str api_version: The version of the API in yyyy-MM-dd format (UTC). For versioning information please refer to /iaas/api/about
        :return: CloudAccountNsxT
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_nsx_t_cloud_account" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_nsx_t_cloud_account`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'api_version' in params:
            query_params.append(('apiVersion', params['api_version']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'app/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/iaas/api/cloud-accounts-nsx-t/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CloudAccountNsxT',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_nsx_t_cloud_accounts(self, **kwargs):  # noqa: E501
        """Get NSX-T cloud accounts  # noqa: E501

        Get all NSX-T cloud accounts within the current organization  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_nsx_t_cloud_accounts(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_version: The version of the API in yyyy-MM-dd format (UTC). For versioning information please refer to /iaas/api/about
        :return: CloudAccountNsxTResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_nsx_t_cloud_accounts_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_nsx_t_cloud_accounts_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_nsx_t_cloud_accounts_with_http_info(self, **kwargs):  # noqa: E501
        """Get NSX-T cloud accounts  # noqa: E501

        Get all NSX-T cloud accounts within the current organization  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_nsx_t_cloud_accounts_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_version: The version of the API in yyyy-MM-dd format (UTC). For versioning information please refer to /iaas/api/about
        :return: CloudAccountNsxTResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_nsx_t_cloud_accounts" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'api_version' in params:
            query_params.append(('apiVersion', params['api_version']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'app/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/iaas/api/cloud-accounts-nsx-t', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CloudAccountNsxTResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_nsx_v_cloud_account(self, id, **kwargs):  # noqa: E501
        """Get an NSX-V cloud account  # noqa: E501

        Get an NSX-V cloud account with a given id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_nsx_v_cloud_account(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The ID of the Cloud Account (required)
        :param str api_version: The version of the API in yyyy-MM-dd format (UTC). For versioning information please refer to /iaas/api/about
        :return: CloudAccountNsxV
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_nsx_v_cloud_account_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_nsx_v_cloud_account_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_nsx_v_cloud_account_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get an NSX-V cloud account  # noqa: E501

        Get an NSX-V cloud account with a given id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_nsx_v_cloud_account_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The ID of the Cloud Account (required)
        :param str api_version: The version of the API in yyyy-MM-dd format (UTC). For versioning information please refer to /iaas/api/about
        :return: CloudAccountNsxV
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_nsx_v_cloud_account" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_nsx_v_cloud_account`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'api_version' in params:
            query_params.append(('apiVersion', params['api_version']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'app/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/iaas/api/cloud-accounts-nsx-v/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CloudAccountNsxV',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_nsx_v_cloud_accounts(self, **kwargs):  # noqa: E501
        """Get NSX-V cloud accounts  # noqa: E501

        Get all NSX-V cloud accounts within the current organization  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_nsx_v_cloud_accounts(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_version: The version of the API in yyyy-MM-dd format (UTC). For versioning information please refer to /iaas/api/about
        :return: CloudAccountNsxVResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_nsx_v_cloud_accounts_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_nsx_v_cloud_accounts_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_nsx_v_cloud_accounts_with_http_info(self, **kwargs):  # noqa: E501
        """Get NSX-V cloud accounts  # noqa: E501

        Get all NSX-V cloud accounts within the current organization  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_nsx_v_cloud_accounts_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_version: The version of the API in yyyy-MM-dd format (UTC). For versioning information please refer to /iaas/api/about
        :return: CloudAccountNsxVResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_nsx_v_cloud_accounts" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'api_version' in params:
            query_params.append(('apiVersion', params['api_version']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'app/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/iaas/api/cloud-accounts-nsx-v', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CloudAccountNsxVResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_v_sphere_cloud_account(self, id, **kwargs):  # noqa: E501
        """Get an vSphere cloud account  # noqa: E501

        Get an vSphere cloud account with a given id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_v_sphere_cloud_account(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The ID of the Cloud Account (required)
        :param str api_version: The version of the API in yyyy-MM-dd format (UTC). For versioning information please refer to /iaas/api/about
        :return: CloudAccountVsphere
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_v_sphere_cloud_account_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_v_sphere_cloud_account_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_v_sphere_cloud_account_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get an vSphere cloud account  # noqa: E501

        Get an vSphere cloud account with a given id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_v_sphere_cloud_account_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The ID of the Cloud Account (required)
        :param str api_version: The version of the API in yyyy-MM-dd format (UTC). For versioning information please refer to /iaas/api/about
        :return: CloudAccountVsphere
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_v_sphere_cloud_account" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_v_sphere_cloud_account`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'api_version' in params:
            query_params.append(('apiVersion', params['api_version']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'app/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/iaas/api/cloud-accounts-vsphere/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CloudAccountVsphere',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_v_sphere_cloud_accounts(self, **kwargs):  # noqa: E501
        """Get vSphere cloud accounts  # noqa: E501

        Get all vSphere cloud accounts within the current organization  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_v_sphere_cloud_accounts(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_version: The version of the API in yyyy-MM-dd format (UTC). For versioning information please refer to /iaas/api/about
        :return: CloudAccountVsphereResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_v_sphere_cloud_accounts_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_v_sphere_cloud_accounts_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_v_sphere_cloud_accounts_with_http_info(self, **kwargs):  # noqa: E501
        """Get vSphere cloud accounts  # noqa: E501

        Get all vSphere cloud accounts within the current organization  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_v_sphere_cloud_accounts_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_version: The version of the API in yyyy-MM-dd format (UTC). For versioning information please refer to /iaas/api/about
        :return: CloudAccountVsphereResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_v_sphere_cloud_accounts" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'api_version' in params:
            query_params.append(('apiVersion', params['api_version']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'app/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/iaas/api/cloud-accounts-vsphere', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CloudAccountVsphereResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_aws_cloud_account(self, body, id, **kwargs):  # noqa: E501
        """Update AWS cloud account  # noqa: E501

        Update AWS cloud account  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_aws_cloud_account(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UpdateCloudAccountAwsSpecification body: AWS cloud account details to be updated (required)
        :param str id: Cloud account id (required)
        :param str api_version: The version of the API in yyyy-MM-dd format (UTC). For versioning information please refer to /iaas/api/about
        :return: CloudAccountAws
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_aws_cloud_account_with_http_info(body, id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_aws_cloud_account_with_http_info(body, id, **kwargs)  # noqa: E501
            return data

    def update_aws_cloud_account_with_http_info(self, body, id, **kwargs):  # noqa: E501
        """Update AWS cloud account  # noqa: E501

        Update AWS cloud account  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_aws_cloud_account_with_http_info(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UpdateCloudAccountAwsSpecification body: AWS cloud account details to be updated (required)
        :param str id: Cloud account id (required)
        :param str api_version: The version of the API in yyyy-MM-dd format (UTC). For versioning information please refer to /iaas/api/about
        :return: CloudAccountAws
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'id', 'api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_aws_cloud_account" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_aws_cloud_account`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `update_aws_cloud_account`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'api_version' in params:
            query_params.append(('apiVersion', params['api_version']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'app/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/iaas/api/cloud-accounts-aws/{id}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CloudAccountAws',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_azure_cloud_account(self, body, id, **kwargs):  # noqa: E501
        """Update Azure cloud account  # noqa: E501

        Update Azure cloud account  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_azure_cloud_account(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UpdateCloudAccountAzureSpecification body: Azure cloud account details to be updated (required)
        :param str id: Cloud account id (required)
        :param str api_version: The version of the API in yyyy-MM-dd format (UTC). For versioning information please refer to /iaas/api/about
        :return: CloudAccountAzure
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_azure_cloud_account_with_http_info(body, id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_azure_cloud_account_with_http_info(body, id, **kwargs)  # noqa: E501
            return data

    def update_azure_cloud_account_with_http_info(self, body, id, **kwargs):  # noqa: E501
        """Update Azure cloud account  # noqa: E501

        Update Azure cloud account  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_azure_cloud_account_with_http_info(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UpdateCloudAccountAzureSpecification body: Azure cloud account details to be updated (required)
        :param str id: Cloud account id (required)
        :param str api_version: The version of the API in yyyy-MM-dd format (UTC). For versioning information please refer to /iaas/api/about
        :return: CloudAccountAzure
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'id', 'api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_azure_cloud_account" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_azure_cloud_account`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `update_azure_cloud_account`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'api_version' in params:
            query_params.append(('apiVersion', params['api_version']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'app/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/iaas/api/cloud-accounts-azure/{id}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CloudAccountAzure',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_cloud_account(self, body, id, **kwargs):  # noqa: E501
        """Update CloudAccount  # noqa: E501

        Update a single CloudAccount  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_cloud_account(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UpdateCloudAccountSpecification body: Cloud account details to be updated (required)
        :param str id: The ID of the cloudAccount (required)
        :param str api_version: The version of the API in yyyy-MM-dd format (UTC). For versioning information please refer to /iaas/api/about
        :return: CloudAccount
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_cloud_account_with_http_info(body, id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_cloud_account_with_http_info(body, id, **kwargs)  # noqa: E501
            return data

    def update_cloud_account_with_http_info(self, body, id, **kwargs):  # noqa: E501
        """Update CloudAccount  # noqa: E501

        Update a single CloudAccount  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_cloud_account_with_http_info(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UpdateCloudAccountSpecification body: Cloud account details to be updated (required)
        :param str id: The ID of the cloudAccount (required)
        :param str api_version: The version of the API in yyyy-MM-dd format (UTC). For versioning information please refer to /iaas/api/about
        :return: CloudAccount
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'id', 'api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_cloud_account" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_cloud_account`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `update_cloud_account`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'api_version' in params:
            query_params.append(('apiVersion', params['api_version']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'app/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/iaas/api/cloud-accounts/{id}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CloudAccount',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_gcp_cloud_account(self, body, id, **kwargs):  # noqa: E501
        """Update GCP cloud account  # noqa: E501

        Update GCP cloud account  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_gcp_cloud_account(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UpdateCloudAccountGcpSpecification body: GCP cloud account details to be updated (required)
        :param str id: Cloud account id (required)
        :param str api_version: The version of the API in yyyy-MM-dd format (UTC). For versioning information please refer to /iaas/api/about
        :return: CloudAccountGcp
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_gcp_cloud_account_with_http_info(body, id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_gcp_cloud_account_with_http_info(body, id, **kwargs)  # noqa: E501
            return data

    def update_gcp_cloud_account_with_http_info(self, body, id, **kwargs):  # noqa: E501
        """Update GCP cloud account  # noqa: E501

        Update GCP cloud account  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_gcp_cloud_account_with_http_info(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UpdateCloudAccountGcpSpecification body: GCP cloud account details to be updated (required)
        :param str id: Cloud account id (required)
        :param str api_version: The version of the API in yyyy-MM-dd format (UTC). For versioning information please refer to /iaas/api/about
        :return: CloudAccountGcp
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'id', 'api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_gcp_cloud_account" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_gcp_cloud_account`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `update_gcp_cloud_account`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'api_version' in params:
            query_params.append(('apiVersion', params['api_version']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'app/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/iaas/api/cloud-accounts-gcp/{id}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CloudAccountGcp',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_nsx_t_cloud_account(self, body, id, **kwargs):  # noqa: E501
        """Update NSX-T cloud account  # noqa: E501

        Update NSX-T cloud account  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_nsx_t_cloud_account(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UpdateCloudAccountSpecificationBase body: NSX-T cloud account details to be updated (required)
        :param str id: Cloud account id (required)
        :param str api_version: The version of the API in yyyy-MM-dd format (UTC). For versioning information please refer to /iaas/api/about
        :return: CloudAccountNsxT
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_nsx_t_cloud_account_with_http_info(body, id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_nsx_t_cloud_account_with_http_info(body, id, **kwargs)  # noqa: E501
            return data

    def update_nsx_t_cloud_account_with_http_info(self, body, id, **kwargs):  # noqa: E501
        """Update NSX-T cloud account  # noqa: E501

        Update NSX-T cloud account  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_nsx_t_cloud_account_with_http_info(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UpdateCloudAccountSpecificationBase body: NSX-T cloud account details to be updated (required)
        :param str id: Cloud account id (required)
        :param str api_version: The version of the API in yyyy-MM-dd format (UTC). For versioning information please refer to /iaas/api/about
        :return: CloudAccountNsxT
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'id', 'api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_nsx_t_cloud_account" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_nsx_t_cloud_account`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `update_nsx_t_cloud_account`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'api_version' in params:
            query_params.append(('apiVersion', params['api_version']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'app/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/iaas/api/cloud-accounts-nsx-t/{id}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CloudAccountNsxT',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_nsx_v_cloud_account(self, body, id, **kwargs):  # noqa: E501
        """Update NSX-V cloud account  # noqa: E501

        Update NSX-V cloud account  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_nsx_v_cloud_account(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UpdateCloudAccountSpecificationBase body: NSX-V cloud account details to be updated (required)
        :param str id: Cloud account id (required)
        :param str api_version: The version of the API in yyyy-MM-dd format (UTC). For versioning information please refer to /iaas/api/about
        :return: CloudAccountNsxV
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_nsx_v_cloud_account_with_http_info(body, id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_nsx_v_cloud_account_with_http_info(body, id, **kwargs)  # noqa: E501
            return data

    def update_nsx_v_cloud_account_with_http_info(self, body, id, **kwargs):  # noqa: E501
        """Update NSX-V cloud account  # noqa: E501

        Update NSX-V cloud account  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_nsx_v_cloud_account_with_http_info(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UpdateCloudAccountSpecificationBase body: NSX-V cloud account details to be updated (required)
        :param str id: Cloud account id (required)
        :param str api_version: The version of the API in yyyy-MM-dd format (UTC). For versioning information please refer to /iaas/api/about
        :return: CloudAccountNsxV
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'id', 'api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_nsx_v_cloud_account" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_nsx_v_cloud_account`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `update_nsx_v_cloud_account`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'api_version' in params:
            query_params.append(('apiVersion', params['api_version']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'app/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/iaas/api/cloud-accounts-nsx-v/{id}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CloudAccountNsxV',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_v_sphere_cloud_account(self, body, id, **kwargs):  # noqa: E501
        """Update vSphere cloud account  # noqa: E501

        Update vSphere cloud account  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_v_sphere_cloud_account(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UpdateCloudAccountVsphereSpecification body: VSphere cloud account details to be updated (required)
        :param str id: Cloud account id (required)
        :param str api_version: The version of the API in yyyy-MM-dd format (UTC). For versioning information please refer to /iaas/api/about
        :return: CloudAccountVsphere
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_v_sphere_cloud_account_with_http_info(body, id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_v_sphere_cloud_account_with_http_info(body, id, **kwargs)  # noqa: E501
            return data

    def update_v_sphere_cloud_account_with_http_info(self, body, id, **kwargs):  # noqa: E501
        """Update vSphere cloud account  # noqa: E501

        Update vSphere cloud account  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_v_sphere_cloud_account_with_http_info(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UpdateCloudAccountVsphereSpecification body: VSphere cloud account details to be updated (required)
        :param str id: Cloud account id (required)
        :param str api_version: The version of the API in yyyy-MM-dd format (UTC). For versioning information please refer to /iaas/api/about
        :return: CloudAccountVsphere
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'id', 'api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_v_sphere_cloud_account" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_v_sphere_cloud_account`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `update_v_sphere_cloud_account`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'api_version' in params:
            query_params.append(('apiVersion', params['api_version']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'app/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/iaas/api/cloud-accounts-vsphere/{id}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CloudAccountVsphere',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
