# coding: utf-8

"""
    VMware Cloud Assembly IaaS API

    A multi-cloud IaaS API for Cloud Automation Services  # noqa: E501

    OpenAPI spec version: 2019-01-15
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class ComputeApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def attach_machine_disk(self, body, id, **kwargs):  # noqa: E501
        """Attach machine disk  # noqa: E501

        Attach a disk to a machine.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.attach_machine_disk(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DiskAttachmentSpecification body: Disk Specification instance (required)
        :param str id: The ID of the machine. (required)
        :param str api_version: The version of the API in yyyy-MM-dd format (UTC). For versioning information please refer to /iaas/api/about
        :return: BlockDevice
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.attach_machine_disk_with_http_info(body, id, **kwargs)  # noqa: E501
        else:
            (data) = self.attach_machine_disk_with_http_info(body, id, **kwargs)  # noqa: E501
            return data

    def attach_machine_disk_with_http_info(self, body, id, **kwargs):  # noqa: E501
        """Attach machine disk  # noqa: E501

        Attach a disk to a machine.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.attach_machine_disk_with_http_info(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DiskAttachmentSpecification body: Disk Specification instance (required)
        :param str id: The ID of the machine. (required)
        :param str api_version: The version of the API in yyyy-MM-dd format (UTC). For versioning information please refer to /iaas/api/about
        :return: BlockDevice
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'id', 'api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method attach_machine_disk" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `attach_machine_disk`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `attach_machine_disk`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'api_version' in params:
            query_params.append(('apiVersion', params['api_version']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'app/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/iaas/api/machines/{id}/disks', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BlockDevice',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_machine(self, body, **kwargs):  # noqa: E501
        """Create machine  # noqa: E501

        Create machine  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_machine(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MachineSpecification body: Machine Specification instance (required)
        :param str api_version: The version of the API in yyyy-MM-dd format (UTC). For versioning information please refer to /iaas/api/about
        :return: RequestTracker
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_machine_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.create_machine_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def create_machine_with_http_info(self, body, **kwargs):  # noqa: E501
        """Create machine  # noqa: E501

        Create machine  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_machine_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MachineSpecification body: Machine Specification instance (required)
        :param str api_version: The version of the API in yyyy-MM-dd format (UTC). For versioning information please refer to /iaas/api/about
        :return: RequestTracker
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_machine" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_machine`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'api_version' in params:
            query_params.append(('apiVersion', params['api_version']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'app/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/iaas/api/machines', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RequestTracker',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_machine_snapshot(self, body, id, **kwargs):  # noqa: E501
        """Create snapshot operation for machine  # noqa: E501

        Second day create snapshot operation for machine  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_machine_snapshot(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SnapshotSpecification body: Snapshot Specification details (required)
        :param str id: The id of the Machine. (required)
        :param str api_version: The version of the API in yyyy-MM-dd format (UTC). For versioning information please refer to /iaas/api/about
        :return: RequestTracker
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_machine_snapshot_with_http_info(body, id, **kwargs)  # noqa: E501
        else:
            (data) = self.create_machine_snapshot_with_http_info(body, id, **kwargs)  # noqa: E501
            return data

    def create_machine_snapshot_with_http_info(self, body, id, **kwargs):  # noqa: E501
        """Create snapshot operation for machine  # noqa: E501

        Second day create snapshot operation for machine  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_machine_snapshot_with_http_info(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SnapshotSpecification body: Snapshot Specification details (required)
        :param str id: The id of the Machine. (required)
        :param str api_version: The version of the API in yyyy-MM-dd format (UTC). For versioning information please refer to /iaas/api/about
        :return: RequestTracker
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'id', 'api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_machine_snapshot" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_machine_snapshot`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `create_machine_snapshot`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'api_version' in params:
            query_params.append(('apiVersion', params['api_version']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'app/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/iaas/api/machines/{id}/operations/snapshots', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RequestTracker',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_machine(self, id, **kwargs):  # noqa: E501
        """Delete Machine  # noqa: E501

        Delete Machine with a given id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_machine(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The ID of the machine. (required)
        :param str api_version: The version of the API in yyyy-MM-dd format (UTC). For versioning information please refer to /iaas/api/about
        :return: RequestTracker
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_machine_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_machine_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def delete_machine_with_http_info(self, id, **kwargs):  # noqa: E501
        """Delete Machine  # noqa: E501

        Delete Machine with a given id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_machine_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The ID of the machine. (required)
        :param str api_version: The version of the API in yyyy-MM-dd format (UTC). For versioning information please refer to /iaas/api/about
        :return: RequestTracker
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_machine" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `delete_machine`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'api_version' in params:
            query_params.append(('apiVersion', params['api_version']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'app/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/iaas/api/machines/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RequestTracker',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_machine_disk(self, id, id1, **kwargs):  # noqa: E501
        """Delete machine disk  # noqa: E501

        Remove a disk from a given machine.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_machine_disk(id, id1, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The ID of the machine. (required)
        :param str id1: The ID of the disk. (required)
        :param str api_version: The version of the API in yyyy-MM-dd format (UTC). For versioning information please refer to /iaas/api/about
        :return: BlockDevice
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_machine_disk_with_http_info(id, id1, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_machine_disk_with_http_info(id, id1, **kwargs)  # noqa: E501
            return data

    def delete_machine_disk_with_http_info(self, id, id1, **kwargs):  # noqa: E501
        """Delete machine disk  # noqa: E501

        Remove a disk from a given machine.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_machine_disk_with_http_info(id, id1, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The ID of the machine. (required)
        :param str id1: The ID of the disk. (required)
        :param str api_version: The version of the API in yyyy-MM-dd format (UTC). For versioning information please refer to /iaas/api/about
        :return: BlockDevice
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'id1', 'api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_machine_disk" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `delete_machine_disk`")  # noqa: E501
        # verify the required parameter 'id1' is set
        if ('id1' not in params or
                params['id1'] is None):
            raise ValueError("Missing the required parameter `id1` when calling `delete_machine_disk`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'id1' in params:
            path_params['id1'] = params['id1']  # noqa: E501

        query_params = []
        if 'api_version' in params:
            query_params.append(('apiVersion', params['api_version']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/iaas/api/machines/{id}/disks/{id1}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BlockDevice',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_machine_snapshot(self, id, id1, **kwargs):  # noqa: E501
        """Delete snapshot operation for machine  # noqa: E501

        Second day delete snapshot operation for machine  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_machine_snapshot(id, id1, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The id of the Machine. (required)
        :param str id1: Snapshot id to delete. (required)
        :param str api_version: The version of the API in yyyy-MM-dd format (UTC). For versioning information please refer to /iaas/api/about
        :return: RequestTracker
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_machine_snapshot_with_http_info(id, id1, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_machine_snapshot_with_http_info(id, id1, **kwargs)  # noqa: E501
            return data

    def delete_machine_snapshot_with_http_info(self, id, id1, **kwargs):  # noqa: E501
        """Delete snapshot operation for machine  # noqa: E501

        Second day delete snapshot operation for machine  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_machine_snapshot_with_http_info(id, id1, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The id of the Machine. (required)
        :param str id1: Snapshot id to delete. (required)
        :param str api_version: The version of the API in yyyy-MM-dd format (UTC). For versioning information please refer to /iaas/api/about
        :return: RequestTracker
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'id1', 'api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_machine_snapshot" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `delete_machine_snapshot`")  # noqa: E501
        # verify the required parameter 'id1' is set
        if ('id1' not in params or
                params['id1'] is None):
            raise ValueError("Missing the required parameter `id1` when calling `delete_machine_snapshot`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'id1' in params:
            path_params['id1'] = params['id1']  # noqa: E501

        query_params = []
        if 'api_version' in params:
            query_params.append(('apiVersion', params['api_version']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'app/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/iaas/api/machines/{id}/snapshots/{id1}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RequestTracker',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_machine(self, id, **kwargs):  # noqa: E501
        """Get machine  # noqa: E501

        Get machine with a given id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_machine(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The ID of the machine. (required)
        :param str api_version: The version of the API in yyyy-MM-dd format (UTC). For versioning information please refer to /iaas/api/about
        :return: Machine
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_machine_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_machine_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_machine_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get machine  # noqa: E501

        Get machine with a given id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_machine_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The ID of the machine. (required)
        :param str api_version: The version of the API in yyyy-MM-dd format (UTC). For versioning information please refer to /iaas/api/about
        :return: Machine
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_machine" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_machine`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'api_version' in params:
            query_params.append(('apiVersion', params['api_version']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'app/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/iaas/api/machines/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Machine',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_machine_disk(self, id, id1, **kwargs):  # noqa: E501
        """Get a machine disk  # noqa: E501

        Get disk with a given id for specific machine  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_machine_disk(id, id1, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The ID of the machine. (required)
        :param str id1: The ID of the disk. (required)
        :param str api_version: The version of the API in yyyy-MM-dd format (UTC). For versioning information please refer to /iaas/api/about
        :return: BlockDevice
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_machine_disk_with_http_info(id, id1, **kwargs)  # noqa: E501
        else:
            (data) = self.get_machine_disk_with_http_info(id, id1, **kwargs)  # noqa: E501
            return data

    def get_machine_disk_with_http_info(self, id, id1, **kwargs):  # noqa: E501
        """Get a machine disk  # noqa: E501

        Get disk with a given id for specific machine  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_machine_disk_with_http_info(id, id1, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The ID of the machine. (required)
        :param str id1: The ID of the disk. (required)
        :param str api_version: The version of the API in yyyy-MM-dd format (UTC). For versioning information please refer to /iaas/api/about
        :return: BlockDevice
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'id1', 'api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_machine_disk" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_machine_disk`")  # noqa: E501
        # verify the required parameter 'id1' is set
        if ('id1' not in params or
                params['id1'] is None):
            raise ValueError("Missing the required parameter `id1` when calling `get_machine_disk`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'id1' in params:
            path_params['id1'] = params['id1']  # noqa: E501

        query_params = []
        if 'api_version' in params:
            query_params.append(('apiVersion', params['api_version']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/iaas/api/machines/{id}/disks/{id1}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BlockDevice',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_machine_disks(self, id, **kwargs):  # noqa: E501
        """Get machine disks  # noqa: E501

        Get all machine disks  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_machine_disks(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The ID of the machine. (required)
        :param str api_version: The version of the API in yyyy-MM-dd format (UTC). For versioning information please refer to /iaas/api/about
        :return: BlockDeviceResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_machine_disks_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_machine_disks_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_machine_disks_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get machine disks  # noqa: E501

        Get all machine disks  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_machine_disks_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The ID of the machine. (required)
        :param str api_version: The version of the API in yyyy-MM-dd format (UTC). For versioning information please refer to /iaas/api/about
        :return: BlockDeviceResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_machine_disks" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_machine_disks`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'api_version' in params:
            query_params.append(('apiVersion', params['api_version']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/iaas/api/machines/{id}/disks', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BlockDeviceResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_machine_network_interface(self, id, id1, **kwargs):  # noqa: E501
        """Get machine network interface  # noqa: E501

        Get network interface with a given id for specific machine  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_machine_network_interface(id, id1, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The ID of the machine. (required)
        :param str id1: The ID of the network interface. (required)
        :param str api_version: The version of the API in yyyy-MM-dd format (UTC). For versioning information please refer to /iaas/api/about
        :return: NetworkInterface
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_machine_network_interface_with_http_info(id, id1, **kwargs)  # noqa: E501
        else:
            (data) = self.get_machine_network_interface_with_http_info(id, id1, **kwargs)  # noqa: E501
            return data

    def get_machine_network_interface_with_http_info(self, id, id1, **kwargs):  # noqa: E501
        """Get machine network interface  # noqa: E501

        Get network interface with a given id for specific machine  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_machine_network_interface_with_http_info(id, id1, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The ID of the machine. (required)
        :param str id1: The ID of the network interface. (required)
        :param str api_version: The version of the API in yyyy-MM-dd format (UTC). For versioning information please refer to /iaas/api/about
        :return: NetworkInterface
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'id1', 'api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_machine_network_interface" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_machine_network_interface`")  # noqa: E501
        # verify the required parameter 'id1' is set
        if ('id1' not in params or
                params['id1'] is None):
            raise ValueError("Missing the required parameter `id1` when calling `get_machine_network_interface`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'id1' in params:
            path_params['id1'] = params['id1']  # noqa: E501

        query_params = []
        if 'api_version' in params:
            query_params.append(('apiVersion', params['api_version']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/iaas/api/machines/{id}/network-interfaces/{id1}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NetworkInterface',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_machine_snapshots(self, id, **kwargs):  # noqa: E501
        """Get machine snapshots information  # noqa: E501

        Get machine snapshots information  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_machine_snapshots(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The ID of the machine. (required)
        :param str api_version: The version of the API in yyyy-MM-dd format (UTC). For versioning information please refer to /iaas/api/about
        :return: list[Snapshot]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_machine_snapshots_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_machine_snapshots_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_machine_snapshots_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get machine snapshots information  # noqa: E501

        Get machine snapshots information  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_machine_snapshots_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The ID of the machine. (required)
        :param str api_version: The version of the API in yyyy-MM-dd format (UTC). For versioning information please refer to /iaas/api/about
        :return: list[Snapshot]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_machine_snapshots" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_machine_snapshots`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'api_version' in params:
            query_params.append(('apiVersion', params['api_version']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/iaas/api/machines/{id}/snapshots', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Snapshot]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_machines(self, **kwargs):  # noqa: E501
        """Get machines  # noqa: E501

        Get all machines  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_machines(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_version: The version of the API in yyyy-MM-dd format (UTC). For versioning information please refer to /iaas/api/about
        :return: MachineResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_machines_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_machines_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_machines_with_http_info(self, **kwargs):  # noqa: E501
        """Get machines  # noqa: E501

        Get all machines  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_machines_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_version: The version of the API in yyyy-MM-dd format (UTC). For versioning information please refer to /iaas/api/about
        :return: MachineResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_machines" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'api_version' in params:
            query_params.append(('apiVersion', params['api_version']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'app/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/iaas/api/machines', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MachineResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def power_off_machine(self, id, **kwargs):  # noqa: E501
        """Power-off operation for machine  # noqa: E501

        Second day power-off operation for machine  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.power_off_machine(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The id of the Machine. (required)
        :param str api_version: The version of the API in yyyy-MM-dd format (UTC). For versioning information please refer to /iaas/api/about
        :return: RequestTracker
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.power_off_machine_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.power_off_machine_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def power_off_machine_with_http_info(self, id, **kwargs):  # noqa: E501
        """Power-off operation for machine  # noqa: E501

        Second day power-off operation for machine  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.power_off_machine_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The id of the Machine. (required)
        :param str api_version: The version of the API in yyyy-MM-dd format (UTC). For versioning information please refer to /iaas/api/about
        :return: RequestTracker
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method power_off_machine" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `power_off_machine`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'api_version' in params:
            query_params.append(('apiVersion', params['api_version']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'app/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/iaas/api/machines/{id}/operations/power-off', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RequestTracker',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def power_on_machine(self, id, **kwargs):  # noqa: E501
        """Power-on operation for machine  # noqa: E501

        Second day power-on operation for machine  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.power_on_machine(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The id of the Machine. (required)
        :param str api_version: The version of the API in yyyy-MM-dd format (UTC). For versioning information please refer to /iaas/api/about
        :return: RequestTracker
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.power_on_machine_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.power_on_machine_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def power_on_machine_with_http_info(self, id, **kwargs):  # noqa: E501
        """Power-on operation for machine  # noqa: E501

        Second day power-on operation for machine  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.power_on_machine_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The id of the Machine. (required)
        :param str api_version: The version of the API in yyyy-MM-dd format (UTC). For versioning information please refer to /iaas/api/about
        :return: RequestTracker
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method power_on_machine" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `power_on_machine`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'api_version' in params:
            query_params.append(('apiVersion', params['api_version']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'app/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/iaas/api/machines/{id}/operations/power-on', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RequestTracker',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def reboot_machine(self, id, **kwargs):  # noqa: E501
        """Reboot operation for machine  # noqa: E501

        Second day reboot operation for machine  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.reboot_machine(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The id of the Machine. (required)
        :param str api_version: The version of the API in yyyy-MM-dd format (UTC). For versioning information please refer to /iaas/api/about
        :return: RequestTracker
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.reboot_machine_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.reboot_machine_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def reboot_machine_with_http_info(self, id, **kwargs):  # noqa: E501
        """Reboot operation for machine  # noqa: E501

        Second day reboot operation for machine  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.reboot_machine_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The id of the Machine. (required)
        :param str api_version: The version of the API in yyyy-MM-dd format (UTC). For versioning information please refer to /iaas/api/about
        :return: RequestTracker
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method reboot_machine" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `reboot_machine`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'api_version' in params:
            query_params.append(('apiVersion', params['api_version']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'app/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/iaas/api/machines/{id}/operations/reboot', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RequestTracker',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def reset_machine(self, id, **kwargs):  # noqa: E501
        """Reset operation for machine  # noqa: E501

        Second day reset operation for machine  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.reset_machine(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The id of the Machine. (required)
        :param str api_version: The version of the API in yyyy-MM-dd format (UTC). For versioning information please refer to /iaas/api/about
        :return: RequestTracker
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.reset_machine_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.reset_machine_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def reset_machine_with_http_info(self, id, **kwargs):  # noqa: E501
        """Reset operation for machine  # noqa: E501

        Second day reset operation for machine  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.reset_machine_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The id of the Machine. (required)
        :param str api_version: The version of the API in yyyy-MM-dd format (UTC). For versioning information please refer to /iaas/api/about
        :return: RequestTracker
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method reset_machine" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `reset_machine`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'api_version' in params:
            query_params.append(('apiVersion', params['api_version']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'app/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/iaas/api/machines/{id}/operations/reset', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RequestTracker',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def resize_machine(self, id, **kwargs):  # noqa: E501
        """Resize operation for machine  # noqa: E501

        Second day resize operation for machine  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.resize_machine(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The id of the Machine. (required)
        :param str name: The desired flavor to resize the Machine.
        :param str cpu_count: The desired number of CPUs to resize the Machine
        :param str memory_in_mb: The desired memory in MBs to resize the Machine
        :param str api_version: The version of the API in yyyy-MM-dd format (UTC). For versioning information please refer to /iaas/api/about
        :return: RequestTracker
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.resize_machine_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.resize_machine_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def resize_machine_with_http_info(self, id, **kwargs):  # noqa: E501
        """Resize operation for machine  # noqa: E501

        Second day resize operation for machine  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.resize_machine_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The id of the Machine. (required)
        :param str name: The desired flavor to resize the Machine.
        :param str cpu_count: The desired number of CPUs to resize the Machine
        :param str memory_in_mb: The desired memory in MBs to resize the Machine
        :param str api_version: The version of the API in yyyy-MM-dd format (UTC). For versioning information please refer to /iaas/api/about
        :return: RequestTracker
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'name', 'cpu_count', 'memory_in_mb', 'api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method resize_machine" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `resize_machine`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501
        if 'cpu_count' in params:
            query_params.append(('cpuCount', params['cpu_count']))  # noqa: E501
        if 'memory_in_mb' in params:
            query_params.append(('memoryInMB', params['memory_in_mb']))  # noqa: E501
        if 'api_version' in params:
            query_params.append(('apiVersion', params['api_version']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'app/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/iaas/api/machines/{id}/operations/resize', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RequestTracker',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def restart_machine(self, id, **kwargs):  # noqa: E501
        """Restart operation for machine  # noqa: E501

        Second day restart operation for machine  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.restart_machine(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The id of the Machine. (required)
        :param str api_version: The version of the API in yyyy-MM-dd format (UTC). For versioning information please refer to /iaas/api/about
        :return: RequestTracker
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.restart_machine_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.restart_machine_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def restart_machine_with_http_info(self, id, **kwargs):  # noqa: E501
        """Restart operation for machine  # noqa: E501

        Second day restart operation for machine  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.restart_machine_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The id of the Machine. (required)
        :param str api_version: The version of the API in yyyy-MM-dd format (UTC). For versioning information please refer to /iaas/api/about
        :return: RequestTracker
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method restart_machine" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `restart_machine`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'api_version' in params:
            query_params.append(('apiVersion', params['api_version']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'app/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/iaas/api/machines/{id}/operations/restart', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RequestTracker',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def revert_machine_snapshot(self, id, id2, **kwargs):  # noqa: E501
        """Revert snapshot operation for machine  # noqa: E501

        Second day revert snapshot operation for machine  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.revert_machine_snapshot(id, id2, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The id of the Machine. (required)
        :param str id2: Snapshot id to revert. (required)
        :param str api_version: The version of the API in yyyy-MM-dd format (UTC). For versioning information please refer to /iaas/api/about
        :return: RequestTracker
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.revert_machine_snapshot_with_http_info(id, id2, **kwargs)  # noqa: E501
        else:
            (data) = self.revert_machine_snapshot_with_http_info(id, id2, **kwargs)  # noqa: E501
            return data

    def revert_machine_snapshot_with_http_info(self, id, id2, **kwargs):  # noqa: E501
        """Revert snapshot operation for machine  # noqa: E501

        Second day revert snapshot operation for machine  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.revert_machine_snapshot_with_http_info(id, id2, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The id of the Machine. (required)
        :param str id2: Snapshot id to revert. (required)
        :param str api_version: The version of the API in yyyy-MM-dd format (UTC). For versioning information please refer to /iaas/api/about
        :return: RequestTracker
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'id2', 'api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method revert_machine_snapshot" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `revert_machine_snapshot`")  # noqa: E501
        # verify the required parameter 'id2' is set
        if ('id2' not in params or
                params['id2'] is None):
            raise ValueError("Missing the required parameter `id2` when calling `revert_machine_snapshot`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'id2' in params:
            query_params.append(('id', params['id2']))  # noqa: E501
        if 'api_version' in params:
            query_params.append(('apiVersion', params['api_version']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'app/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/iaas/api/machines/{id}/operations/revert', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RequestTracker',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def shutdown_machine(self, id, **kwargs):  # noqa: E501
        """Shut down operation for machine  # noqa: E501

        Second day shut down operation machine  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.shutdown_machine(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The id of the Machine. (required)
        :param str api_version: The version of the API in yyyy-MM-dd format (UTC). For versioning information please refer to /iaas/api/about
        :return: RequestTracker
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.shutdown_machine_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.shutdown_machine_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def shutdown_machine_with_http_info(self, id, **kwargs):  # noqa: E501
        """Shut down operation for machine  # noqa: E501

        Second day shut down operation machine  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.shutdown_machine_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The id of the Machine. (required)
        :param str api_version: The version of the API in yyyy-MM-dd format (UTC). For versioning information please refer to /iaas/api/about
        :return: RequestTracker
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method shutdown_machine" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `shutdown_machine`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'api_version' in params:
            query_params.append(('apiVersion', params['api_version']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'app/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/iaas/api/machines/{id}/operations/shutdown', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RequestTracker',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def suspend_machine(self, id, **kwargs):  # noqa: E501
        """Suspend operation for machine  # noqa: E501

        Second day suspend operation for machine  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.suspend_machine(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The id of the Machine. (required)
        :param str api_version: The version of the API in yyyy-MM-dd format (UTC). For versioning information please refer to /iaas/api/about
        :return: RequestTracker
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.suspend_machine_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.suspend_machine_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def suspend_machine_with_http_info(self, id, **kwargs):  # noqa: E501
        """Suspend operation for machine  # noqa: E501

        Second day suspend operation for machine  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.suspend_machine_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The id of the Machine. (required)
        :param str api_version: The version of the API in yyyy-MM-dd format (UTC). For versioning information please refer to /iaas/api/about
        :return: RequestTracker
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method suspend_machine" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `suspend_machine`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'api_version' in params:
            query_params.append(('apiVersion', params['api_version']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'app/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/iaas/api/machines/{id}/operations/suspend', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RequestTracker',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_machine(self, body, id, **kwargs):  # noqa: E501
        """Update machine.  # noqa: E501

        Update machine. Only tag updates are supported. All other properties in the MachineSpecification body are ignored.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_machine(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UpdateMachineSpecification body: Machine Specification (required)
        :param str id: The ID of the Machine. (required)
        :param str api_version: The version of the API in yyyy-MM-dd format (UTC). For versioning information please refer to /iaas/api/about
        :return: Machine
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_machine_with_http_info(body, id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_machine_with_http_info(body, id, **kwargs)  # noqa: E501
            return data

    def update_machine_with_http_info(self, body, id, **kwargs):  # noqa: E501
        """Update machine.  # noqa: E501

        Update machine. Only tag updates are supported. All other properties in the MachineSpecification body are ignored.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_machine_with_http_info(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UpdateMachineSpecification body: Machine Specification (required)
        :param str id: The ID of the Machine. (required)
        :param str api_version: The version of the API in yyyy-MM-dd format (UTC). For versioning information please refer to /iaas/api/about
        :return: Machine
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'id', 'api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_machine" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_machine`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `update_machine`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'api_version' in params:
            query_params.append(('apiVersion', params['api_version']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'app/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/iaas/api/machines/{id}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Machine',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
