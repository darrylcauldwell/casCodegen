# coding: utf-8

"""
    VMware Cloud Assembly IaaS API

    A multi-cloud IaaS API for Cloud Automation Services  # noqa: E501

    OpenAPI spec version: 2019-01-15
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from swagger_client.models.tag import Tag  # noqa: F401,E501


class NetworkProfileSpecification(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'description': 'str',
        'fabric_network_ids': 'list[str]',
        'security_group_ids': 'list[str]',
        'region_id': 'str',
        'isolation_type': 'str',
        'isolation_network_domain_id': 'str',
        'isolation_network_domain_cidr': 'str',
        'isolation_external_fabric_network_id': 'str',
        'isolated_network_cidr_prefix': 'int',
        'tags': 'list[Tag]',
        'custom_properties': 'dict(str, str)'
    }

    attribute_map = {
        'name': 'name',
        'description': 'description',
        'fabric_network_ids': 'fabricNetworkIds',
        'security_group_ids': 'securityGroupIds',
        'region_id': 'regionId',
        'isolation_type': 'isolationType',
        'isolation_network_domain_id': 'isolationNetworkDomainId',
        'isolation_network_domain_cidr': 'isolationNetworkDomainCIDR',
        'isolation_external_fabric_network_id': 'isolationExternalFabricNetworkId',
        'isolated_network_cidr_prefix': 'isolatedNetworkCIDRPrefix',
        'tags': 'tags',
        'custom_properties': 'customProperties'
    }

    def __init__(self, name=None, description=None, fabric_network_ids=None, security_group_ids=None, region_id=None, isolation_type=None, isolation_network_domain_id=None, isolation_network_domain_cidr=None, isolation_external_fabric_network_id=None, isolated_network_cidr_prefix=None, tags=None, custom_properties=None):  # noqa: E501
        """NetworkProfileSpecification - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._description = None
        self._fabric_network_ids = None
        self._security_group_ids = None
        self._region_id = None
        self._isolation_type = None
        self._isolation_network_domain_id = None
        self._isolation_network_domain_cidr = None
        self._isolation_external_fabric_network_id = None
        self._isolated_network_cidr_prefix = None
        self._tags = None
        self._custom_properties = None
        self.discriminator = None
        self.name = name
        if description is not None:
            self.description = description
        if fabric_network_ids is not None:
            self.fabric_network_ids = fabric_network_ids
        if security_group_ids is not None:
            self.security_group_ids = security_group_ids
        self.region_id = region_id
        if isolation_type is not None:
            self.isolation_type = isolation_type
        if isolation_network_domain_id is not None:
            self.isolation_network_domain_id = isolation_network_domain_id
        if isolation_network_domain_cidr is not None:
            self.isolation_network_domain_cidr = isolation_network_domain_cidr
        if isolation_external_fabric_network_id is not None:
            self.isolation_external_fabric_network_id = isolation_external_fabric_network_id
        if isolated_network_cidr_prefix is not None:
            self.isolated_network_cidr_prefix = isolated_network_cidr_prefix
        if tags is not None:
            self.tags = tags
        if custom_properties is not None:
            self.custom_properties = custom_properties

    @property
    def name(self):
        """Gets the name of this NetworkProfileSpecification.  # noqa: E501

        A human-friendly name used as an identifier in APIs that support this option.  # noqa: E501

        :return: The name of this NetworkProfileSpecification.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this NetworkProfileSpecification.

        A human-friendly name used as an identifier in APIs that support this option.  # noqa: E501

        :param name: The name of this NetworkProfileSpecification.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def description(self):
        """Gets the description of this NetworkProfileSpecification.  # noqa: E501

        A human-friendly description.  # noqa: E501

        :return: The description of this NetworkProfileSpecification.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this NetworkProfileSpecification.

        A human-friendly description.  # noqa: E501

        :param description: The description of this NetworkProfileSpecification.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def fabric_network_ids(self):
        """Gets the fabric_network_ids of this NetworkProfileSpecification.  # noqa: E501

        A list of fabric network Ids which are assigned to the network profile.  # noqa: E501

        :return: The fabric_network_ids of this NetworkProfileSpecification.  # noqa: E501
        :rtype: list[str]
        """
        return self._fabric_network_ids

    @fabric_network_ids.setter
    def fabric_network_ids(self, fabric_network_ids):
        """Sets the fabric_network_ids of this NetworkProfileSpecification.

        A list of fabric network Ids which are assigned to the network profile.  # noqa: E501

        :param fabric_network_ids: The fabric_network_ids of this NetworkProfileSpecification.  # noqa: E501
        :type: list[str]
        """

        self._fabric_network_ids = fabric_network_ids

    @property
    def security_group_ids(self):
        """Gets the security_group_ids of this NetworkProfileSpecification.  # noqa: E501

        A list of security group Ids which are assigned to the network profile.  # noqa: E501

        :return: The security_group_ids of this NetworkProfileSpecification.  # noqa: E501
        :rtype: list[str]
        """
        return self._security_group_ids

    @security_group_ids.setter
    def security_group_ids(self, security_group_ids):
        """Sets the security_group_ids of this NetworkProfileSpecification.

        A list of security group Ids which are assigned to the network profile.  # noqa: E501

        :param security_group_ids: The security_group_ids of this NetworkProfileSpecification.  # noqa: E501
        :type: list[str]
        """

        self._security_group_ids = security_group_ids

    @property
    def region_id(self):
        """Gets the region_id of this NetworkProfileSpecification.  # noqa: E501

        The Id of the region for which this profile is created  # noqa: E501

        :return: The region_id of this NetworkProfileSpecification.  # noqa: E501
        :rtype: str
        """
        return self._region_id

    @region_id.setter
    def region_id(self, region_id):
        """Sets the region_id of this NetworkProfileSpecification.

        The Id of the region for which this profile is created  # noqa: E501

        :param region_id: The region_id of this NetworkProfileSpecification.  # noqa: E501
        :type: str
        """
        if region_id is None:
            raise ValueError("Invalid value for `region_id`, must not be `None`")  # noqa: E501

        self._region_id = region_id

    @property
    def isolation_type(self):
        """Gets the isolation_type of this NetworkProfileSpecification.  # noqa: E501

        Specifies the isolation type e.g. none, subnet or security group  # noqa: E501

        :return: The isolation_type of this NetworkProfileSpecification.  # noqa: E501
        :rtype: str
        """
        return self._isolation_type

    @isolation_type.setter
    def isolation_type(self, isolation_type):
        """Sets the isolation_type of this NetworkProfileSpecification.

        Specifies the isolation type e.g. none, subnet or security group  # noqa: E501

        :param isolation_type: The isolation_type of this NetworkProfileSpecification.  # noqa: E501
        :type: str
        """
        allowed_values = ["NONE", "SUBNET", "SECURITY_GROUP"]  # noqa: E501
        if isolation_type not in allowed_values:
            raise ValueError(
                "Invalid value for `isolation_type` ({0}), must be one of {1}"  # noqa: E501
                .format(isolation_type, allowed_values)
            )

        self._isolation_type = isolation_type

    @property
    def isolation_network_domain_id(self):
        """Gets the isolation_network_domain_id of this NetworkProfileSpecification.  # noqa: E501

        The Id of the network domain used for creating isolated networks.  # noqa: E501

        :return: The isolation_network_domain_id of this NetworkProfileSpecification.  # noqa: E501
        :rtype: str
        """
        return self._isolation_network_domain_id

    @isolation_network_domain_id.setter
    def isolation_network_domain_id(self, isolation_network_domain_id):
        """Sets the isolation_network_domain_id of this NetworkProfileSpecification.

        The Id of the network domain used for creating isolated networks.  # noqa: E501

        :param isolation_network_domain_id: The isolation_network_domain_id of this NetworkProfileSpecification.  # noqa: E501
        :type: str
        """

        self._isolation_network_domain_id = isolation_network_domain_id

    @property
    def isolation_network_domain_cidr(self):
        """Gets the isolation_network_domain_cidr of this NetworkProfileSpecification.  # noqa: E501

        CIDR of the isolation network domain.  # noqa: E501

        :return: The isolation_network_domain_cidr of this NetworkProfileSpecification.  # noqa: E501
        :rtype: str
        """
        return self._isolation_network_domain_cidr

    @isolation_network_domain_cidr.setter
    def isolation_network_domain_cidr(self, isolation_network_domain_cidr):
        """Sets the isolation_network_domain_cidr of this NetworkProfileSpecification.

        CIDR of the isolation network domain.  # noqa: E501

        :param isolation_network_domain_cidr: The isolation_network_domain_cidr of this NetworkProfileSpecification.  # noqa: E501
        :type: str
        """

        self._isolation_network_domain_cidr = isolation_network_domain_cidr

    @property
    def isolation_external_fabric_network_id(self):
        """Gets the isolation_external_fabric_network_id of this NetworkProfileSpecification.  # noqa: E501

        The Id of the fabric network used for outbound access.  # noqa: E501

        :return: The isolation_external_fabric_network_id of this NetworkProfileSpecification.  # noqa: E501
        :rtype: str
        """
        return self._isolation_external_fabric_network_id

    @isolation_external_fabric_network_id.setter
    def isolation_external_fabric_network_id(self, isolation_external_fabric_network_id):
        """Sets the isolation_external_fabric_network_id of this NetworkProfileSpecification.

        The Id of the fabric network used for outbound access.  # noqa: E501

        :param isolation_external_fabric_network_id: The isolation_external_fabric_network_id of this NetworkProfileSpecification.  # noqa: E501
        :type: str
        """

        self._isolation_external_fabric_network_id = isolation_external_fabric_network_id

    @property
    def isolated_network_cidr_prefix(self):
        """Gets the isolated_network_cidr_prefix of this NetworkProfileSpecification.  # noqa: E501

        The CIDR prefix length to be used for the isolated networks that are created with the network profile.  # noqa: E501

        :return: The isolated_network_cidr_prefix of this NetworkProfileSpecification.  # noqa: E501
        :rtype: int
        """
        return self._isolated_network_cidr_prefix

    @isolated_network_cidr_prefix.setter
    def isolated_network_cidr_prefix(self, isolated_network_cidr_prefix):
        """Sets the isolated_network_cidr_prefix of this NetworkProfileSpecification.

        The CIDR prefix length to be used for the isolated networks that are created with the network profile.  # noqa: E501

        :param isolated_network_cidr_prefix: The isolated_network_cidr_prefix of this NetworkProfileSpecification.  # noqa: E501
        :type: int
        """

        self._isolated_network_cidr_prefix = isolated_network_cidr_prefix

    @property
    def tags(self):
        """Gets the tags of this NetworkProfileSpecification.  # noqa: E501

        A set of tag keys and optional values that should be set on any resource that is produced from this specification.  # noqa: E501

        :return: The tags of this NetworkProfileSpecification.  # noqa: E501
        :rtype: list[Tag]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this NetworkProfileSpecification.

        A set of tag keys and optional values that should be set on any resource that is produced from this specification.  # noqa: E501

        :param tags: The tags of this NetworkProfileSpecification.  # noqa: E501
        :type: list[Tag]
        """

        self._tags = tags

    @property
    def custom_properties(self):
        """Gets the custom_properties of this NetworkProfileSpecification.  # noqa: E501

        Additional properties that may be used to extend the Network Profile object that is produced from this specification.  # noqa: E501

        :return: The custom_properties of this NetworkProfileSpecification.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._custom_properties

    @custom_properties.setter
    def custom_properties(self, custom_properties):
        """Sets the custom_properties of this NetworkProfileSpecification.

        Additional properties that may be used to extend the Network Profile object that is produced from this specification.  # noqa: E501

        :param custom_properties: The custom_properties of this NetworkProfileSpecification.  # noqa: E501
        :type: dict(str, str)
        """

        self._custom_properties = custom_properties

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(NetworkProfileSpecification, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NetworkProfileSpecification):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
