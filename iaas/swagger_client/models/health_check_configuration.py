# coding: utf-8

"""
    VMware Cloud Assembly IaaS API

    A multi-cloud IaaS API for Cloud Automation Services  # noqa: E501

    OpenAPI spec version: 2019-01-15
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class HealthCheckConfiguration(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'protocol': 'str',
        'port': 'str',
        'url_path': 'str',
        'interval_seconds': 'int',
        'timeout_seconds': 'int',
        'unhealthy_threshold': 'int',
        'healthy_threshold': 'int'
    }

    attribute_map = {
        'protocol': 'protocol',
        'port': 'port',
        'url_path': 'urlPath',
        'interval_seconds': 'intervalSeconds',
        'timeout_seconds': 'timeoutSeconds',
        'unhealthy_threshold': 'unhealthyThreshold',
        'healthy_threshold': 'healthyThreshold'
    }

    def __init__(self, protocol=None, port=None, url_path=None, interval_seconds=None, timeout_seconds=None, unhealthy_threshold=None, healthy_threshold=None):  # noqa: E501
        """HealthCheckConfiguration - a model defined in Swagger"""  # noqa: E501
        self._protocol = None
        self._port = None
        self._url_path = None
        self._interval_seconds = None
        self._timeout_seconds = None
        self._unhealthy_threshold = None
        self._healthy_threshold = None
        self.discriminator = None
        self.protocol = protocol
        self.port = port
        if url_path is not None:
            self.url_path = url_path
        if interval_seconds is not None:
            self.interval_seconds = interval_seconds
        if timeout_seconds is not None:
            self.timeout_seconds = timeout_seconds
        if unhealthy_threshold is not None:
            self.unhealthy_threshold = unhealthy_threshold
        if healthy_threshold is not None:
            self.healthy_threshold = healthy_threshold

    @property
    def protocol(self):
        """Gets the protocol of this HealthCheckConfiguration.  # noqa: E501

        The protocol used for the health check.  # noqa: E501

        :return: The protocol of this HealthCheckConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._protocol

    @protocol.setter
    def protocol(self, protocol):
        """Sets the protocol of this HealthCheckConfiguration.

        The protocol used for the health check.  # noqa: E501

        :param protocol: The protocol of this HealthCheckConfiguration.  # noqa: E501
        :type: str
        """
        if protocol is None:
            raise ValueError("Invalid value for `protocol`, must not be `None`")  # noqa: E501

        self._protocol = protocol

    @property
    def port(self):
        """Gets the port of this HealthCheckConfiguration.  # noqa: E501

        Port on the back-end instance machine to use for the health check.  # noqa: E501

        :return: The port of this HealthCheckConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._port

    @port.setter
    def port(self, port):
        """Sets the port of this HealthCheckConfiguration.

        Port on the back-end instance machine to use for the health check.  # noqa: E501

        :param port: The port of this HealthCheckConfiguration.  # noqa: E501
        :type: str
        """
        if port is None:
            raise ValueError("Invalid value for `port`, must not be `None`")  # noqa: E501

        self._port = port

    @property
    def url_path(self):
        """Gets the url_path of this HealthCheckConfiguration.  # noqa: E501

        URL path on the back-end instance against which a request will be performed for the health check. Useful when the health check protocol is HTTP/HTTPS.  # noqa: E501

        :return: The url_path of this HealthCheckConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._url_path

    @url_path.setter
    def url_path(self, url_path):
        """Sets the url_path of this HealthCheckConfiguration.

        URL path on the back-end instance against which a request will be performed for the health check. Useful when the health check protocol is HTTP/HTTPS.  # noqa: E501

        :param url_path: The url_path of this HealthCheckConfiguration.  # noqa: E501
        :type: str
        """

        self._url_path = url_path

    @property
    def interval_seconds(self):
        """Gets the interval_seconds of this HealthCheckConfiguration.  # noqa: E501

        Interval (in seconds) at which the health checks will be performed.  # noqa: E501

        :return: The interval_seconds of this HealthCheckConfiguration.  # noqa: E501
        :rtype: int
        """
        return self._interval_seconds

    @interval_seconds.setter
    def interval_seconds(self, interval_seconds):
        """Sets the interval_seconds of this HealthCheckConfiguration.

        Interval (in seconds) at which the health checks will be performed.  # noqa: E501

        :param interval_seconds: The interval_seconds of this HealthCheckConfiguration.  # noqa: E501
        :type: int
        """

        self._interval_seconds = interval_seconds

    @property
    def timeout_seconds(self):
        """Gets the timeout_seconds of this HealthCheckConfiguration.  # noqa: E501

        Timeout (in seconds) to wait for a response from the back-end instance.  # noqa: E501

        :return: The timeout_seconds of this HealthCheckConfiguration.  # noqa: E501
        :rtype: int
        """
        return self._timeout_seconds

    @timeout_seconds.setter
    def timeout_seconds(self, timeout_seconds):
        """Sets the timeout_seconds of this HealthCheckConfiguration.

        Timeout (in seconds) to wait for a response from the back-end instance.  # noqa: E501

        :param timeout_seconds: The timeout_seconds of this HealthCheckConfiguration.  # noqa: E501
        :type: int
        """

        self._timeout_seconds = timeout_seconds

    @property
    def unhealthy_threshold(self):
        """Gets the unhealthy_threshold of this HealthCheckConfiguration.  # noqa: E501

        Number of consecutive check failures before considering a particular back-end instance as unhealthy.  # noqa: E501

        :return: The unhealthy_threshold of this HealthCheckConfiguration.  # noqa: E501
        :rtype: int
        """
        return self._unhealthy_threshold

    @unhealthy_threshold.setter
    def unhealthy_threshold(self, unhealthy_threshold):
        """Sets the unhealthy_threshold of this HealthCheckConfiguration.

        Number of consecutive check failures before considering a particular back-end instance as unhealthy.  # noqa: E501

        :param unhealthy_threshold: The unhealthy_threshold of this HealthCheckConfiguration.  # noqa: E501
        :type: int
        """

        self._unhealthy_threshold = unhealthy_threshold

    @property
    def healthy_threshold(self):
        """Gets the healthy_threshold of this HealthCheckConfiguration.  # noqa: E501

        Number of consecutive successful checks before considering a particular back-end instance as healthy.  # noqa: E501

        :return: The healthy_threshold of this HealthCheckConfiguration.  # noqa: E501
        :rtype: int
        """
        return self._healthy_threshold

    @healthy_threshold.setter
    def healthy_threshold(self, healthy_threshold):
        """Sets the healthy_threshold of this HealthCheckConfiguration.

        Number of consecutive successful checks before considering a particular back-end instance as healthy.  # noqa: E501

        :param healthy_threshold: The healthy_threshold of this HealthCheckConfiguration.  # noqa: E501
        :type: int
        """

        self._healthy_threshold = healthy_threshold

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(HealthCheckConfiguration, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, HealthCheckConfiguration):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
