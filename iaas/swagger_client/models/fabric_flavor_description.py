# coding: utf-8

"""
    VMware Cloud Assembly IaaS API

    A multi-cloud IaaS API for Cloud Automation Services  # noqa: E501

    OpenAPI spec version: 2019-01-15
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class FabricFlavorDescription(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'cpu_count': 'int',
        'memory_in_mb': 'int'
    }

    attribute_map = {
        'name': 'name',
        'cpu_count': 'cpuCount',
        'memory_in_mb': 'memoryInMB'
    }

    def __init__(self, name=None, cpu_count=None, memory_in_mb=None):  # noqa: E501
        """FabricFlavorDescription - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._cpu_count = None
        self._memory_in_mb = None
        self.discriminator = None
        if name is not None:
            self.name = name
        if cpu_count is not None:
            self.cpu_count = cpu_count
        if memory_in_mb is not None:
            self.memory_in_mb = memory_in_mb

    @property
    def name(self):
        """Gets the name of this FabricFlavorDescription.  # noqa: E501

        The value of the instance type in the corresponding cloud. Valid and mandatory for public clouds  # noqa: E501

        :return: The name of this FabricFlavorDescription.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this FabricFlavorDescription.

        The value of the instance type in the corresponding cloud. Valid and mandatory for public clouds  # noqa: E501

        :param name: The name of this FabricFlavorDescription.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def cpu_count(self):
        """Gets the cpu_count of this FabricFlavorDescription.  # noqa: E501

        Number of CPU cores. Mandatory for private clouds such as vSphere. Not populated when inapplicable.  # noqa: E501

        :return: The cpu_count of this FabricFlavorDescription.  # noqa: E501
        :rtype: int
        """
        return self._cpu_count

    @cpu_count.setter
    def cpu_count(self, cpu_count):
        """Sets the cpu_count of this FabricFlavorDescription.

        Number of CPU cores. Mandatory for private clouds such as vSphere. Not populated when inapplicable.  # noqa: E501

        :param cpu_count: The cpu_count of this FabricFlavorDescription.  # noqa: E501
        :type: int
        """

        self._cpu_count = cpu_count

    @property
    def memory_in_mb(self):
        """Gets the memory_in_mb of this FabricFlavorDescription.  # noqa: E501

        Total amount of memory (in megabytes). Mandatory for private clouds such as vSphere. Not populated when inapplicable.  # noqa: E501

        :return: The memory_in_mb of this FabricFlavorDescription.  # noqa: E501
        :rtype: int
        """
        return self._memory_in_mb

    @memory_in_mb.setter
    def memory_in_mb(self, memory_in_mb):
        """Sets the memory_in_mb of this FabricFlavorDescription.

        Total amount of memory (in megabytes). Mandatory for private clouds such as vSphere. Not populated when inapplicable.  # noqa: E501

        :param memory_in_mb: The memory_in_mb of this FabricFlavorDescription.  # noqa: E501
        :type: int
        """

        self._memory_in_mb = memory_in_mb

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FabricFlavorDescription, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FabricFlavorDescription):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
