# coding: utf-8

"""
    VMware Cloud Assembly IaaS API

    A multi-cloud IaaS API for Cloud Automation Services  # noqa: E501

    OpenAPI spec version: 2019-01-15
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from swagger_client.models.constraint import Constraint  # noqa: F401,E501
from swagger_client.models.user import User  # noqa: F401,E501
from swagger_client.models.zone_assignment_config import ZoneAssignmentConfig  # noqa: F401,E501


class ProjectSpecification(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'description': 'str',
        'administrators': 'list[User]',
        'members': 'list[User]',
        'zone_assignment_configurations': 'list[ZoneAssignmentConfig]',
        'constraints': 'dict(str, list[Constraint])',
        'operation_timeout': 'int',
        'machine_naming_template': 'str',
        'shared_resources': 'bool'
    }

    attribute_map = {
        'name': 'name',
        'description': 'description',
        'administrators': 'administrators',
        'members': 'members',
        'zone_assignment_configurations': 'zoneAssignmentConfigurations',
        'constraints': 'constraints',
        'operation_timeout': 'operationTimeout',
        'machine_naming_template': 'machineNamingTemplate',
        'shared_resources': 'sharedResources'
    }

    def __init__(self, name=None, description=None, administrators=None, members=None, zone_assignment_configurations=None, constraints=None, operation_timeout=None, machine_naming_template=None, shared_resources=None):  # noqa: E501
        """ProjectSpecification - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._description = None
        self._administrators = None
        self._members = None
        self._zone_assignment_configurations = None
        self._constraints = None
        self._operation_timeout = None
        self._machine_naming_template = None
        self._shared_resources = None
        self.discriminator = None
        self.name = name
        if description is not None:
            self.description = description
        if administrators is not None:
            self.administrators = administrators
        if members is not None:
            self.members = members
        if zone_assignment_configurations is not None:
            self.zone_assignment_configurations = zone_assignment_configurations
        if constraints is not None:
            self.constraints = constraints
        if operation_timeout is not None:
            self.operation_timeout = operation_timeout
        if machine_naming_template is not None:
            self.machine_naming_template = machine_naming_template
        if shared_resources is not None:
            self.shared_resources = shared_resources

    @property
    def name(self):
        """Gets the name of this ProjectSpecification.  # noqa: E501

        A human-friendly name used as an identifier in APIs that support this option.  # noqa: E501

        :return: The name of this ProjectSpecification.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ProjectSpecification.

        A human-friendly name used as an identifier in APIs that support this option.  # noqa: E501

        :param name: The name of this ProjectSpecification.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def description(self):
        """Gets the description of this ProjectSpecification.  # noqa: E501

        A human-friendly description.  # noqa: E501

        :return: The description of this ProjectSpecification.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ProjectSpecification.

        A human-friendly description.  # noqa: E501

        :param description: The description of this ProjectSpecification.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def administrators(self):
        """Gets the administrators of this ProjectSpecification.  # noqa: E501

        List of administrator users associated with the project. Only administrators can manage project's configuration.  # noqa: E501

        :return: The administrators of this ProjectSpecification.  # noqa: E501
        :rtype: list[User]
        """
        return self._administrators

    @administrators.setter
    def administrators(self, administrators):
        """Sets the administrators of this ProjectSpecification.

        List of administrator users associated with the project. Only administrators can manage project's configuration.  # noqa: E501

        :param administrators: The administrators of this ProjectSpecification.  # noqa: E501
        :type: list[User]
        """

        self._administrators = administrators

    @property
    def members(self):
        """Gets the members of this ProjectSpecification.  # noqa: E501

        List of member users associated with the project.   # noqa: E501

        :return: The members of this ProjectSpecification.  # noqa: E501
        :rtype: list[User]
        """
        return self._members

    @members.setter
    def members(self, members):
        """Sets the members of this ProjectSpecification.

        List of member users associated with the project.   # noqa: E501

        :param members: The members of this ProjectSpecification.  # noqa: E501
        :type: list[User]
        """

        self._members = members

    @property
    def zone_assignment_configurations(self):
        """Gets the zone_assignment_configurations of this ProjectSpecification.  # noqa: E501

        List of configurations for zone assignment to a project.  # noqa: E501

        :return: The zone_assignment_configurations of this ProjectSpecification.  # noqa: E501
        :rtype: list[ZoneAssignmentConfig]
        """
        return self._zone_assignment_configurations

    @zone_assignment_configurations.setter
    def zone_assignment_configurations(self, zone_assignment_configurations):
        """Sets the zone_assignment_configurations of this ProjectSpecification.

        List of configurations for zone assignment to a project.  # noqa: E501

        :param zone_assignment_configurations: The zone_assignment_configurations of this ProjectSpecification.  # noqa: E501
        :type: list[ZoneAssignmentConfig]
        """

        self._zone_assignment_configurations = zone_assignment_configurations

    @property
    def constraints(self):
        """Gets the constraints of this ProjectSpecification.  # noqa: E501

        List of storage, network and extensibility constraints to be applied when provisioning through this project.  # noqa: E501

        :return: The constraints of this ProjectSpecification.  # noqa: E501
        :rtype: dict(str, list[Constraint])
        """
        return self._constraints

    @constraints.setter
    def constraints(self, constraints):
        """Sets the constraints of this ProjectSpecification.

        List of storage, network and extensibility constraints to be applied when provisioning through this project.  # noqa: E501

        :param constraints: The constraints of this ProjectSpecification.  # noqa: E501
        :type: dict(str, list[Constraint])
        """

        self._constraints = constraints

    @property
    def operation_timeout(self):
        """Gets the operation_timeout of this ProjectSpecification.  # noqa: E501

        The timeout that should be used for Blueprint operations and Provisioning tasks. The timeout is in seconds  # noqa: E501

        :return: The operation_timeout of this ProjectSpecification.  # noqa: E501
        :rtype: int
        """
        return self._operation_timeout

    @operation_timeout.setter
    def operation_timeout(self, operation_timeout):
        """Sets the operation_timeout of this ProjectSpecification.

        The timeout that should be used for Blueprint operations and Provisioning tasks. The timeout is in seconds  # noqa: E501

        :param operation_timeout: The operation_timeout of this ProjectSpecification.  # noqa: E501
        :type: int
        """

        self._operation_timeout = operation_timeout

    @property
    def machine_naming_template(self):
        """Gets the machine_naming_template of this ProjectSpecification.  # noqa: E501

        The naming template to be used for machines provisioned in this project  # noqa: E501

        :return: The machine_naming_template of this ProjectSpecification.  # noqa: E501
        :rtype: str
        """
        return self._machine_naming_template

    @machine_naming_template.setter
    def machine_naming_template(self, machine_naming_template):
        """Sets the machine_naming_template of this ProjectSpecification.

        The naming template to be used for machines provisioned in this project  # noqa: E501

        :param machine_naming_template: The machine_naming_template of this ProjectSpecification.  # noqa: E501
        :type: str
        """

        self._machine_naming_template = machine_naming_template

    @property
    def shared_resources(self):
        """Gets the shared_resources of this ProjectSpecification.  # noqa: E501

        Specifies whether the resources in this projects are shared or not. If not set default will be used.  # noqa: E501

        :return: The shared_resources of this ProjectSpecification.  # noqa: E501
        :rtype: bool
        """
        return self._shared_resources

    @shared_resources.setter
    def shared_resources(self, shared_resources):
        """Sets the shared_resources of this ProjectSpecification.

        Specifies whether the resources in this projects are shared or not. If not set default will be used.  # noqa: E501

        :param shared_resources: The shared_resources of this ProjectSpecification.  # noqa: E501
        :type: bool
        """

        self._shared_resources = shared_resources

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ProjectSpecification, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProjectSpecification):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
