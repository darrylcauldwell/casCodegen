# coding: utf-8

"""
    VMware Cloud Assembly IaaS API

    A multi-cloud IaaS API for Cloud Automation Services  # noqa: E501

    OpenAPI spec version: 2019-01-15
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from swagger_client.models.href import Href  # noqa: F401,E501
from swagger_client.models.tag import Tag  # noqa: F401,E501


class CloudAccount(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'created_at': 'str',
        'updated_at': 'str',
        'owner': 'str',
        'organization_id': 'str',
        'org_id': 'str',
        'links': 'dict(str, Href)',
        'name': 'str',
        'description': 'str',
        'cloud_account_type': 'str',
        'cloud_account_properties': 'dict(str, str)',
        'enabled_region_ids': 'list[str]',
        'custom_properties': 'dict(str, str)',
        'tags': 'list[Tag]'
    }

    attribute_map = {
        'id': 'id',
        'created_at': 'createdAt',
        'updated_at': 'updatedAt',
        'owner': 'owner',
        'organization_id': 'organizationId',
        'org_id': 'orgId',
        'links': '_links',
        'name': 'name',
        'description': 'description',
        'cloud_account_type': 'cloudAccountType',
        'cloud_account_properties': 'cloudAccountProperties',
        'enabled_region_ids': 'enabledRegionIds',
        'custom_properties': 'customProperties',
        'tags': 'tags'
    }

    def __init__(self, id=None, created_at=None, updated_at=None, owner=None, organization_id=None, org_id=None, links=None, name=None, description=None, cloud_account_type=None, cloud_account_properties=None, enabled_region_ids=None, custom_properties=None, tags=None):  # noqa: E501
        """CloudAccount - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._created_at = None
        self._updated_at = None
        self._owner = None
        self._organization_id = None
        self._org_id = None
        self._links = None
        self._name = None
        self._description = None
        self._cloud_account_type = None
        self._cloud_account_properties = None
        self._enabled_region_ids = None
        self._custom_properties = None
        self._tags = None
        self.discriminator = None
        self.id = id
        if created_at is not None:
            self.created_at = created_at
        if updated_at is not None:
            self.updated_at = updated_at
        if owner is not None:
            self.owner = owner
        if organization_id is not None:
            self.organization_id = organization_id
        if org_id is not None:
            self.org_id = org_id
        self.links = links
        if name is not None:
            self.name = name
        if description is not None:
            self.description = description
        self.cloud_account_type = cloud_account_type
        self.cloud_account_properties = cloud_account_properties
        if enabled_region_ids is not None:
            self.enabled_region_ids = enabled_region_ids
        if custom_properties is not None:
            self.custom_properties = custom_properties
        if tags is not None:
            self.tags = tags

    @property
    def id(self):
        """Gets the id of this CloudAccount.  # noqa: E501

        The id of this resource instance  # noqa: E501

        :return: The id of this CloudAccount.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CloudAccount.

        The id of this resource instance  # noqa: E501

        :param id: The id of this CloudAccount.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def created_at(self):
        """Gets the created_at of this CloudAccount.  # noqa: E501

        Date when the entity was created. The date is in ISO 6801 and UTC.  # noqa: E501

        :return: The created_at of this CloudAccount.  # noqa: E501
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this CloudAccount.

        Date when the entity was created. The date is in ISO 6801 and UTC.  # noqa: E501

        :param created_at: The created_at of this CloudAccount.  # noqa: E501
        :type: str
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this CloudAccount.  # noqa: E501

        Date when the entity was last updated. The date is ISO 8601 and UTC.  # noqa: E501

        :return: The updated_at of this CloudAccount.  # noqa: E501
        :rtype: str
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this CloudAccount.

        Date when the entity was last updated. The date is ISO 8601 and UTC.  # noqa: E501

        :param updated_at: The updated_at of this CloudAccount.  # noqa: E501
        :type: str
        """

        self._updated_at = updated_at

    @property
    def owner(self):
        """Gets the owner of this CloudAccount.  # noqa: E501

        Email of the user that owns the entity.  # noqa: E501

        :return: The owner of this CloudAccount.  # noqa: E501
        :rtype: str
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """Sets the owner of this CloudAccount.

        Email of the user that owns the entity.  # noqa: E501

        :param owner: The owner of this CloudAccount.  # noqa: E501
        :type: str
        """

        self._owner = owner

    @property
    def organization_id(self):
        """Gets the organization_id of this CloudAccount.  # noqa: E501

        This field is deprecated. Use orgId instead. The id of the organization this entity belongs to.  # noqa: E501

        :return: The organization_id of this CloudAccount.  # noqa: E501
        :rtype: str
        """
        return self._organization_id

    @organization_id.setter
    def organization_id(self, organization_id):
        """Sets the organization_id of this CloudAccount.

        This field is deprecated. Use orgId instead. The id of the organization this entity belongs to.  # noqa: E501

        :param organization_id: The organization_id of this CloudAccount.  # noqa: E501
        :type: str
        """

        self._organization_id = organization_id

    @property
    def org_id(self):
        """Gets the org_id of this CloudAccount.  # noqa: E501

        The id of the organization this entity belongs to.  # noqa: E501

        :return: The org_id of this CloudAccount.  # noqa: E501
        :rtype: str
        """
        return self._org_id

    @org_id.setter
    def org_id(self, org_id):
        """Sets the org_id of this CloudAccount.

        The id of the organization this entity belongs to.  # noqa: E501

        :param org_id: The org_id of this CloudAccount.  # noqa: E501
        :type: str
        """

        self._org_id = org_id

    @property
    def links(self):
        """Gets the links of this CloudAccount.  # noqa: E501

        HATEOAS of the entity  # noqa: E501

        :return: The links of this CloudAccount.  # noqa: E501
        :rtype: dict(str, Href)
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this CloudAccount.

        HATEOAS of the entity  # noqa: E501

        :param links: The links of this CloudAccount.  # noqa: E501
        :type: dict(str, Href)
        """
        if links is None:
            raise ValueError("Invalid value for `links`, must not be `None`")  # noqa: E501

        self._links = links

    @property
    def name(self):
        """Gets the name of this CloudAccount.  # noqa: E501

        A human-friendly name used as an identifier in APIs that support this option.  # noqa: E501

        :return: The name of this CloudAccount.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CloudAccount.

        A human-friendly name used as an identifier in APIs that support this option.  # noqa: E501

        :param name: The name of this CloudAccount.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """Gets the description of this CloudAccount.  # noqa: E501

        A human-friendly description.  # noqa: E501

        :return: The description of this CloudAccount.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CloudAccount.

        A human-friendly description.  # noqa: E501

        :param description: The description of this CloudAccount.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def cloud_account_type(self):
        """Gets the cloud_account_type of this CloudAccount.  # noqa: E501

        Cloud account type  # noqa: E501

        :return: The cloud_account_type of this CloudAccount.  # noqa: E501
        :rtype: str
        """
        return self._cloud_account_type

    @cloud_account_type.setter
    def cloud_account_type(self, cloud_account_type):
        """Sets the cloud_account_type of this CloudAccount.

        Cloud account type  # noqa: E501

        :param cloud_account_type: The cloud_account_type of this CloudAccount.  # noqa: E501
        :type: str
        """
        if cloud_account_type is None:
            raise ValueError("Invalid value for `cloud_account_type`, must not be `None`")  # noqa: E501

        self._cloud_account_type = cloud_account_type

    @property
    def cloud_account_properties(self):
        """Gets the cloud_account_properties of this CloudAccount.  # noqa: E501

        Cloud account specific properties  # noqa: E501

        :return: The cloud_account_properties of this CloudAccount.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._cloud_account_properties

    @cloud_account_properties.setter
    def cloud_account_properties(self, cloud_account_properties):
        """Sets the cloud_account_properties of this CloudAccount.

        Cloud account specific properties  # noqa: E501

        :param cloud_account_properties: The cloud_account_properties of this CloudAccount.  # noqa: E501
        :type: dict(str, str)
        """
        if cloud_account_properties is None:
            raise ValueError("Invalid value for `cloud_account_properties`, must not be `None`")  # noqa: E501

        self._cloud_account_properties = cloud_account_properties

    @property
    def enabled_region_ids(self):
        """Gets the enabled_region_ids of this CloudAccount.  # noqa: E501

        A set of region names to enable provisioning on.  # noqa: E501

        :return: The enabled_region_ids of this CloudAccount.  # noqa: E501
        :rtype: list[str]
        """
        return self._enabled_region_ids

    @enabled_region_ids.setter
    def enabled_region_ids(self, enabled_region_ids):
        """Sets the enabled_region_ids of this CloudAccount.

        A set of region names to enable provisioning on.  # noqa: E501

        :param enabled_region_ids: The enabled_region_ids of this CloudAccount.  # noqa: E501
        :type: list[str]
        """

        self._enabled_region_ids = enabled_region_ids

    @property
    def custom_properties(self):
        """Gets the custom_properties of this CloudAccount.  # noqa: E501

        Additional properties that may be used to extend the base type.  # noqa: E501

        :return: The custom_properties of this CloudAccount.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._custom_properties

    @custom_properties.setter
    def custom_properties(self, custom_properties):
        """Sets the custom_properties of this CloudAccount.

        Additional properties that may be used to extend the base type.  # noqa: E501

        :param custom_properties: The custom_properties of this CloudAccount.  # noqa: E501
        :type: dict(str, str)
        """

        self._custom_properties = custom_properties

    @property
    def tags(self):
        """Gets the tags of this CloudAccount.  # noqa: E501

        A set of tag keys and optional values that were set on the Cloud Account  # noqa: E501

        :return: The tags of this CloudAccount.  # noqa: E501
        :rtype: list[Tag]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CloudAccount.

        A set of tag keys and optional values that were set on the Cloud Account  # noqa: E501

        :param tags: The tags of this CloudAccount.  # noqa: E501
        :type: list[Tag]
        """

        self._tags = tags

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CloudAccount, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CloudAccount):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
