# coding: utf-8

"""
    VMware Cloud Assembly IaaS API

    A multi-cloud IaaS API for Cloud Automation Services  # noqa: E501

    OpenAPI spec version: 2019-01-15
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class DeprecationPolicy(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'deprecated_at': 'str',
        'expires_at': 'str',
        'description': 'str'
    }

    attribute_map = {
        'deprecated_at': 'deprecatedAt',
        'expires_at': 'expiresAt',
        'description': 'description'
    }

    def __init__(self, deprecated_at=None, expires_at=None, description=None):  # noqa: E501
        """DeprecationPolicy - a model defined in Swagger"""  # noqa: E501
        self._deprecated_at = None
        self._expires_at = None
        self._description = None
        self.discriminator = None
        if deprecated_at is not None:
            self.deprecated_at = deprecated_at
        if expires_at is not None:
            self.expires_at = expires_at
        if description is not None:
            self.description = description

    @property
    def deprecated_at(self):
        """Gets the deprecated_at of this DeprecationPolicy.  # noqa: E501

        The date the api was deprecated in yyyy-MM-dd format (UTC). Could be empty if the api is not deprecated.  # noqa: E501

        :return: The deprecated_at of this DeprecationPolicy.  # noqa: E501
        :rtype: str
        """
        return self._deprecated_at

    @deprecated_at.setter
    def deprecated_at(self, deprecated_at):
        """Sets the deprecated_at of this DeprecationPolicy.

        The date the api was deprecated in yyyy-MM-dd format (UTC). Could be empty if the api is not deprecated.  # noqa: E501

        :param deprecated_at: The deprecated_at of this DeprecationPolicy.  # noqa: E501
        :type: str
        """

        self._deprecated_at = deprecated_at

    @property
    def expires_at(self):
        """Gets the expires_at of this DeprecationPolicy.  # noqa: E501

        The date the api support will be dropped in yyyy-MM-dd format (UTC). The api may still be available for use after that date but this is not guaranteed.  # noqa: E501

        :return: The expires_at of this DeprecationPolicy.  # noqa: E501
        :rtype: str
        """
        return self._expires_at

    @expires_at.setter
    def expires_at(self, expires_at):
        """Sets the expires_at of this DeprecationPolicy.

        The date the api support will be dropped in yyyy-MM-dd format (UTC). The api may still be available for use after that date but this is not guaranteed.  # noqa: E501

        :param expires_at: The expires_at of this DeprecationPolicy.  # noqa: E501
        :type: str
        """

        self._expires_at = expires_at

    @property
    def description(self):
        """Gets the description of this DeprecationPolicy.  # noqa: E501

        A free text description that contains information about why this api is deprecated and how to migrate to a newer version.  # noqa: E501

        :return: The description of this DeprecationPolicy.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this DeprecationPolicy.

        A free text description that contains information about why this api is deprecated and how to migrate to a newer version.  # noqa: E501

        :param description: The description of this DeprecationPolicy.  # noqa: E501
        :type: str
        """

        self._description = description

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DeprecationPolicy, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DeprecationPolicy):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
