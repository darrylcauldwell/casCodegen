# coding: utf-8

"""
    VMware Cloud Assembly IaaS API

    A multi-cloud IaaS API for Cloud Automation Services  # noqa: E501

    OpenAPI spec version: 2019-01-15
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from swagger_client.models.href import Href  # noqa: F401,E501
from swagger_client.models.tag import Tag  # noqa: F401,E501


class Machine(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'created_at': 'str',
        'updated_at': 'str',
        'owner': 'str',
        'organization_id': 'str',
        'org_id': 'str',
        'links': 'dict(str, Href)',
        'name': 'str',
        'description': 'str',
        'external_id': 'str',
        'project_id': 'str',
        'external_zone_id': 'str',
        'external_region_id': 'str',
        'cloud_account_ids': 'list[str]',
        'power_state': 'str',
        'address': 'str',
        'tags': 'list[Tag]',
        'custom_properties': 'dict(str, str)'
    }

    attribute_map = {
        'id': 'id',
        'created_at': 'createdAt',
        'updated_at': 'updatedAt',
        'owner': 'owner',
        'organization_id': 'organizationId',
        'org_id': 'orgId',
        'links': '_links',
        'name': 'name',
        'description': 'description',
        'external_id': 'externalId',
        'project_id': 'projectId',
        'external_zone_id': 'externalZoneId',
        'external_region_id': 'externalRegionId',
        'cloud_account_ids': 'cloudAccountIds',
        'power_state': 'powerState',
        'address': 'address',
        'tags': 'tags',
        'custom_properties': 'customProperties'
    }

    def __init__(self, id=None, created_at=None, updated_at=None, owner=None, organization_id=None, org_id=None, links=None, name=None, description=None, external_id=None, project_id=None, external_zone_id=None, external_region_id=None, cloud_account_ids=None, power_state=None, address=None, tags=None, custom_properties=None):  # noqa: E501
        """Machine - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._created_at = None
        self._updated_at = None
        self._owner = None
        self._organization_id = None
        self._org_id = None
        self._links = None
        self._name = None
        self._description = None
        self._external_id = None
        self._project_id = None
        self._external_zone_id = None
        self._external_region_id = None
        self._cloud_account_ids = None
        self._power_state = None
        self._address = None
        self._tags = None
        self._custom_properties = None
        self.discriminator = None
        self.id = id
        if created_at is not None:
            self.created_at = created_at
        if updated_at is not None:
            self.updated_at = updated_at
        if owner is not None:
            self.owner = owner
        if organization_id is not None:
            self.organization_id = organization_id
        if org_id is not None:
            self.org_id = org_id
        self.links = links
        if name is not None:
            self.name = name
        if description is not None:
            self.description = description
        if external_id is not None:
            self.external_id = external_id
        if project_id is not None:
            self.project_id = project_id
        self.external_zone_id = external_zone_id
        self.external_region_id = external_region_id
        if cloud_account_ids is not None:
            self.cloud_account_ids = cloud_account_ids
        self.power_state = power_state
        if address is not None:
            self.address = address
        if tags is not None:
            self.tags = tags
        if custom_properties is not None:
            self.custom_properties = custom_properties

    @property
    def id(self):
        """Gets the id of this Machine.  # noqa: E501

        The id of this resource instance  # noqa: E501

        :return: The id of this Machine.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Machine.

        The id of this resource instance  # noqa: E501

        :param id: The id of this Machine.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def created_at(self):
        """Gets the created_at of this Machine.  # noqa: E501

        Date when the entity was created. The date is in ISO 6801 and UTC.  # noqa: E501

        :return: The created_at of this Machine.  # noqa: E501
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Machine.

        Date when the entity was created. The date is in ISO 6801 and UTC.  # noqa: E501

        :param created_at: The created_at of this Machine.  # noqa: E501
        :type: str
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this Machine.  # noqa: E501

        Date when the entity was last updated. The date is ISO 8601 and UTC.  # noqa: E501

        :return: The updated_at of this Machine.  # noqa: E501
        :rtype: str
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this Machine.

        Date when the entity was last updated. The date is ISO 8601 and UTC.  # noqa: E501

        :param updated_at: The updated_at of this Machine.  # noqa: E501
        :type: str
        """

        self._updated_at = updated_at

    @property
    def owner(self):
        """Gets the owner of this Machine.  # noqa: E501

        Email of the user that owns the entity.  # noqa: E501

        :return: The owner of this Machine.  # noqa: E501
        :rtype: str
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """Sets the owner of this Machine.

        Email of the user that owns the entity.  # noqa: E501

        :param owner: The owner of this Machine.  # noqa: E501
        :type: str
        """

        self._owner = owner

    @property
    def organization_id(self):
        """Gets the organization_id of this Machine.  # noqa: E501

        This field is deprecated. Use orgId instead. The id of the organization this entity belongs to.  # noqa: E501

        :return: The organization_id of this Machine.  # noqa: E501
        :rtype: str
        """
        return self._organization_id

    @organization_id.setter
    def organization_id(self, organization_id):
        """Sets the organization_id of this Machine.

        This field is deprecated. Use orgId instead. The id of the organization this entity belongs to.  # noqa: E501

        :param organization_id: The organization_id of this Machine.  # noqa: E501
        :type: str
        """

        self._organization_id = organization_id

    @property
    def org_id(self):
        """Gets the org_id of this Machine.  # noqa: E501

        The id of the organization this entity belongs to.  # noqa: E501

        :return: The org_id of this Machine.  # noqa: E501
        :rtype: str
        """
        return self._org_id

    @org_id.setter
    def org_id(self, org_id):
        """Sets the org_id of this Machine.

        The id of the organization this entity belongs to.  # noqa: E501

        :param org_id: The org_id of this Machine.  # noqa: E501
        :type: str
        """

        self._org_id = org_id

    @property
    def links(self):
        """Gets the links of this Machine.  # noqa: E501

        HATEOAS of the entity  # noqa: E501

        :return: The links of this Machine.  # noqa: E501
        :rtype: dict(str, Href)
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this Machine.

        HATEOAS of the entity  # noqa: E501

        :param links: The links of this Machine.  # noqa: E501
        :type: dict(str, Href)
        """
        if links is None:
            raise ValueError("Invalid value for `links`, must not be `None`")  # noqa: E501

        self._links = links

    @property
    def name(self):
        """Gets the name of this Machine.  # noqa: E501

        A human-friendly name used as an identifier in APIs that support this option.  # noqa: E501

        :return: The name of this Machine.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Machine.

        A human-friendly name used as an identifier in APIs that support this option.  # noqa: E501

        :param name: The name of this Machine.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """Gets the description of this Machine.  # noqa: E501

        A human-friendly description.  # noqa: E501

        :return: The description of this Machine.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Machine.

        A human-friendly description.  # noqa: E501

        :param description: The description of this Machine.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def external_id(self):
        """Gets the external_id of this Machine.  # noqa: E501

        External entity Id on the provider side.  # noqa: E501

        :return: The external_id of this Machine.  # noqa: E501
        :rtype: str
        """
        return self._external_id

    @external_id.setter
    def external_id(self, external_id):
        """Sets the external_id of this Machine.

        External entity Id on the provider side.  # noqa: E501

        :param external_id: The external_id of this Machine.  # noqa: E501
        :type: str
        """

        self._external_id = external_id

    @property
    def project_id(self):
        """Gets the project_id of this Machine.  # noqa: E501

        The id of the project this entity belongs to.  # noqa: E501

        :return: The project_id of this Machine.  # noqa: E501
        :rtype: str
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """Sets the project_id of this Machine.

        The id of the project this entity belongs to.  # noqa: E501

        :param project_id: The project_id of this Machine.  # noqa: E501
        :type: str
        """

        self._project_id = project_id

    @property
    def external_zone_id(self):
        """Gets the external_zone_id of this Machine.  # noqa: E501

        The external zoneId of the resource.  # noqa: E501

        :return: The external_zone_id of this Machine.  # noqa: E501
        :rtype: str
        """
        return self._external_zone_id

    @external_zone_id.setter
    def external_zone_id(self, external_zone_id):
        """Sets the external_zone_id of this Machine.

        The external zoneId of the resource.  # noqa: E501

        :param external_zone_id: The external_zone_id of this Machine.  # noqa: E501
        :type: str
        """
        if external_zone_id is None:
            raise ValueError("Invalid value for `external_zone_id`, must not be `None`")  # noqa: E501

        self._external_zone_id = external_zone_id

    @property
    def external_region_id(self):
        """Gets the external_region_id of this Machine.  # noqa: E501

        The external regionId of the resource  # noqa: E501

        :return: The external_region_id of this Machine.  # noqa: E501
        :rtype: str
        """
        return self._external_region_id

    @external_region_id.setter
    def external_region_id(self, external_region_id):
        """Sets the external_region_id of this Machine.

        The external regionId of the resource  # noqa: E501

        :param external_region_id: The external_region_id of this Machine.  # noqa: E501
        :type: str
        """
        if external_region_id is None:
            raise ValueError("Invalid value for `external_region_id`, must not be `None`")  # noqa: E501

        self._external_region_id = external_region_id

    @property
    def cloud_account_ids(self):
        """Gets the cloud_account_ids of this Machine.  # noqa: E501

        Set of ids of the cloud accounts this entity belongs to.  # noqa: E501

        :return: The cloud_account_ids of this Machine.  # noqa: E501
        :rtype: list[str]
        """
        return self._cloud_account_ids

    @cloud_account_ids.setter
    def cloud_account_ids(self, cloud_account_ids):
        """Sets the cloud_account_ids of this Machine.

        Set of ids of the cloud accounts this entity belongs to.  # noqa: E501

        :param cloud_account_ids: The cloud_account_ids of this Machine.  # noqa: E501
        :type: list[str]
        """

        self._cloud_account_ids = cloud_account_ids

    @property
    def power_state(self):
        """Gets the power_state of this Machine.  # noqa: E501

        Power state of machine.  # noqa: E501

        :return: The power_state of this Machine.  # noqa: E501
        :rtype: str
        """
        return self._power_state

    @power_state.setter
    def power_state(self, power_state):
        """Sets the power_state of this Machine.

        Power state of machine.  # noqa: E501

        :param power_state: The power_state of this Machine.  # noqa: E501
        :type: str
        """
        if power_state is None:
            raise ValueError("Invalid value for `power_state`, must not be `None`")  # noqa: E501
        allowed_values = ["ON", "OFF", "GUEST_OFF", "UNKNOWN", "SUSPEND"]  # noqa: E501
        if power_state not in allowed_values:
            raise ValueError(
                "Invalid value for `power_state` ({0}), must be one of {1}"  # noqa: E501
                .format(power_state, allowed_values)
            )

        self._power_state = power_state

    @property
    def address(self):
        """Gets the address of this Machine.  # noqa: E501

        Primary address allocated or in use by this machine. The actual type of the address depends on the adapter type. Typically it is either the public or the external IP address.  # noqa: E501

        :return: The address of this Machine.  # noqa: E501
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this Machine.

        Primary address allocated or in use by this machine. The actual type of the address depends on the adapter type. Typically it is either the public or the external IP address.  # noqa: E501

        :param address: The address of this Machine.  # noqa: E501
        :type: str
        """

        self._address = address

    @property
    def tags(self):
        """Gets the tags of this Machine.  # noqa: E501

        A set of tag keys and optional values that were set on this resource instance.  # noqa: E501

        :return: The tags of this Machine.  # noqa: E501
        :rtype: list[Tag]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this Machine.

        A set of tag keys and optional values that were set on this resource instance.  # noqa: E501

        :param tags: The tags of this Machine.  # noqa: E501
        :type: list[Tag]
        """

        self._tags = tags

    @property
    def custom_properties(self):
        """Gets the custom_properties of this Machine.  # noqa: E501

        Additional properties that may be used to extend the base type.  # noqa: E501

        :return: The custom_properties of this Machine.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._custom_properties

    @custom_properties.setter
    def custom_properties(self, custom_properties):
        """Sets the custom_properties of this Machine.

        Additional properties that may be used to extend the base type.  # noqa: E501

        :param custom_properties: The custom_properties of this Machine.  # noqa: E501
        :type: dict(str, str)
        """

        self._custom_properties = custom_properties

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Machine, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Machine):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
