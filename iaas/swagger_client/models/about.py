# coding: utf-8

"""
    VMware Cloud Assembly IaaS API

    A multi-cloud IaaS API for Cloud Automation Services  # noqa: E501

    OpenAPI spec version: 2019-01-15
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from swagger_client.models.api_description import ApiDescription  # noqa: F401,E501


class About(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'supported_apis': 'list[ApiDescription]',
        'latest_api_version': 'str'
    }

    attribute_map = {
        'supported_apis': 'supportedApis',
        'latest_api_version': 'latestApiVersion'
    }

    def __init__(self, supported_apis=None, latest_api_version=None):  # noqa: E501
        """About - a model defined in Swagger"""  # noqa: E501
        self._supported_apis = None
        self._latest_api_version = None
        self.discriminator = None
        self.supported_apis = supported_apis
        self.latest_api_version = latest_api_version

    @property
    def supported_apis(self):
        """Gets the supported_apis of this About.  # noqa: E501

        A collection of all currently supported api versions.  # noqa: E501

        :return: The supported_apis of this About.  # noqa: E501
        :rtype: list[ApiDescription]
        """
        return self._supported_apis

    @supported_apis.setter
    def supported_apis(self, supported_apis):
        """Sets the supported_apis of this About.

        A collection of all currently supported api versions.  # noqa: E501

        :param supported_apis: The supported_apis of this About.  # noqa: E501
        :type: list[ApiDescription]
        """
        if supported_apis is None:
            raise ValueError("Invalid value for `supported_apis`, must not be `None`")  # noqa: E501

        self._supported_apis = supported_apis

    @property
    def latest_api_version(self):
        """Gets the latest_api_version of this About.  # noqa: E501

        The latest version of the API in yyyy-MM-dd format (UTC).  # noqa: E501

        :return: The latest_api_version of this About.  # noqa: E501
        :rtype: str
        """
        return self._latest_api_version

    @latest_api_version.setter
    def latest_api_version(self, latest_api_version):
        """Sets the latest_api_version of this About.

        The latest version of the API in yyyy-MM-dd format (UTC).  # noqa: E501

        :param latest_api_version: The latest_api_version of this About.  # noqa: E501
        :type: str
        """
        if latest_api_version is None:
            raise ValueError("Invalid value for `latest_api_version`, must not be `None`")  # noqa: E501

        self._latest_api_version = latest_api_version

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(About, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, About):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
