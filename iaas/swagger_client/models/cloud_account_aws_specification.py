# coding: utf-8

"""
    VMware Cloud Assembly IaaS API

    A multi-cloud IaaS API for Cloud Automation Services  # noqa: E501

    OpenAPI spec version: 2019-01-15
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from swagger_client.models.tag import Tag  # noqa: F401,E501


class CloudAccountAwsSpecification(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'description': 'str',
        'access_key_id': 'str',
        'secret_access_key': 'str',
        'region_ids': 'list[str]',
        'create_default_zones': 'bool',
        'tags': 'list[Tag]'
    }

    attribute_map = {
        'name': 'name',
        'description': 'description',
        'access_key_id': 'accessKeyId',
        'secret_access_key': 'secretAccessKey',
        'region_ids': 'regionIds',
        'create_default_zones': 'createDefaultZones',
        'tags': 'tags'
    }

    def __init__(self, name=None, description=None, access_key_id=None, secret_access_key=None, region_ids=None, create_default_zones=None, tags=None):  # noqa: E501
        """CloudAccountAwsSpecification - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._description = None
        self._access_key_id = None
        self._secret_access_key = None
        self._region_ids = None
        self._create_default_zones = None
        self._tags = None
        self.discriminator = None
        self.name = name
        if description is not None:
            self.description = description
        self.access_key_id = access_key_id
        self.secret_access_key = secret_access_key
        self.region_ids = region_ids
        if create_default_zones is not None:
            self.create_default_zones = create_default_zones
        if tags is not None:
            self.tags = tags

    @property
    def name(self):
        """Gets the name of this CloudAccountAwsSpecification.  # noqa: E501

        A human-friendly name used as an identifier in APIs that support this option.  # noqa: E501

        :return: The name of this CloudAccountAwsSpecification.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CloudAccountAwsSpecification.

        A human-friendly name used as an identifier in APIs that support this option.  # noqa: E501

        :param name: The name of this CloudAccountAwsSpecification.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def description(self):
        """Gets the description of this CloudAccountAwsSpecification.  # noqa: E501

        A human-friendly description.  # noqa: E501

        :return: The description of this CloudAccountAwsSpecification.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CloudAccountAwsSpecification.

        A human-friendly description.  # noqa: E501

        :param description: The description of this CloudAccountAwsSpecification.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def access_key_id(self):
        """Gets the access_key_id of this CloudAccountAwsSpecification.  # noqa: E501

        Aws Access key ID  # noqa: E501

        :return: The access_key_id of this CloudAccountAwsSpecification.  # noqa: E501
        :rtype: str
        """
        return self._access_key_id

    @access_key_id.setter
    def access_key_id(self, access_key_id):
        """Sets the access_key_id of this CloudAccountAwsSpecification.

        Aws Access key ID  # noqa: E501

        :param access_key_id: The access_key_id of this CloudAccountAwsSpecification.  # noqa: E501
        :type: str
        """
        if access_key_id is None:
            raise ValueError("Invalid value for `access_key_id`, must not be `None`")  # noqa: E501

        self._access_key_id = access_key_id

    @property
    def secret_access_key(self):
        """Gets the secret_access_key of this CloudAccountAwsSpecification.  # noqa: E501

        Aws Secret Access Key  # noqa: E501

        :return: The secret_access_key of this CloudAccountAwsSpecification.  # noqa: E501
        :rtype: str
        """
        return self._secret_access_key

    @secret_access_key.setter
    def secret_access_key(self, secret_access_key):
        """Sets the secret_access_key of this CloudAccountAwsSpecification.

        Aws Secret Access Key  # noqa: E501

        :param secret_access_key: The secret_access_key of this CloudAccountAwsSpecification.  # noqa: E501
        :type: str
        """
        if secret_access_key is None:
            raise ValueError("Invalid value for `secret_access_key`, must not be `None`")  # noqa: E501

        self._secret_access_key = secret_access_key

    @property
    def region_ids(self):
        """Gets the region_ids of this CloudAccountAwsSpecification.  # noqa: E501

        A set of Region names to enable provisioning on. Refer to /iaas/cloud-accounts-aws/region-enumeration..  # noqa: E501

        :return: The region_ids of this CloudAccountAwsSpecification.  # noqa: E501
        :rtype: list[str]
        """
        return self._region_ids

    @region_ids.setter
    def region_ids(self, region_ids):
        """Sets the region_ids of this CloudAccountAwsSpecification.

        A set of Region names to enable provisioning on. Refer to /iaas/cloud-accounts-aws/region-enumeration..  # noqa: E501

        :param region_ids: The region_ids of this CloudAccountAwsSpecification.  # noqa: E501
        :type: list[str]
        """
        if region_ids is None:
            raise ValueError("Invalid value for `region_ids`, must not be `None`")  # noqa: E501

        self._region_ids = region_ids

    @property
    def create_default_zones(self):
        """Gets the create_default_zones of this CloudAccountAwsSpecification.  # noqa: E501

        Create default cloud zones for the enabled regions.  # noqa: E501

        :return: The create_default_zones of this CloudAccountAwsSpecification.  # noqa: E501
        :rtype: bool
        """
        return self._create_default_zones

    @create_default_zones.setter
    def create_default_zones(self, create_default_zones):
        """Sets the create_default_zones of this CloudAccountAwsSpecification.

        Create default cloud zones for the enabled regions.  # noqa: E501

        :param create_default_zones: The create_default_zones of this CloudAccountAwsSpecification.  # noqa: E501
        :type: bool
        """

        self._create_default_zones = create_default_zones

    @property
    def tags(self):
        """Gets the tags of this CloudAccountAwsSpecification.  # noqa: E501

        A set of tag keys and optional values to set on the Cloud Account  # noqa: E501

        :return: The tags of this CloudAccountAwsSpecification.  # noqa: E501
        :rtype: list[Tag]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CloudAccountAwsSpecification.

        A set of tag keys and optional values to set on the Cloud Account  # noqa: E501

        :param tags: The tags of this CloudAccountAwsSpecification.  # noqa: E501
        :type: list[Tag]
        """

        self._tags = tags

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CloudAccountAwsSpecification, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CloudAccountAwsSpecification):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
