# coding: utf-8

"""
    VMware Cloud Assembly IaaS API

    A multi-cloud IaaS API for Cloud Automation Services  # noqa: E501

    OpenAPI spec version: 2019-01-15
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from swagger_client.models.fabric_flavor import FabricFlavor  # noqa: F401,E501
from swagger_client.models.href import Href  # noqa: F401,E501


class FlavorMapping(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'mapping': 'dict(str, FabricFlavor)',
        'external_region_id': 'str',
        'links': 'dict(str, Href)'
    }

    attribute_map = {
        'mapping': 'mapping',
        'external_region_id': 'externalRegionId',
        'links': '_links'
    }

    def __init__(self, mapping=None, external_region_id=None, links=None):  # noqa: E501
        """FlavorMapping - a model defined in Swagger"""  # noqa: E501
        self._mapping = None
        self._external_region_id = None
        self._links = None
        self.discriminator = None
        self.mapping = mapping
        if external_region_id is not None:
            self.external_region_id = external_region_id
        self.links = links

    @property
    def mapping(self):
        """Gets the mapping of this FlavorMapping.  # noqa: E501

        Flavors defined for the particular region. Keyed by global flavor key.  # noqa: E501

        :return: The mapping of this FlavorMapping.  # noqa: E501
        :rtype: dict(str, FabricFlavor)
        """
        return self._mapping

    @mapping.setter
    def mapping(self, mapping):
        """Sets the mapping of this FlavorMapping.

        Flavors defined for the particular region. Keyed by global flavor key.  # noqa: E501

        :param mapping: The mapping of this FlavorMapping.  # noqa: E501
        :type: dict(str, FabricFlavor)
        """
        if mapping is None:
            raise ValueError("Invalid value for `mapping`, must not be `None`")  # noqa: E501

        self._mapping = mapping

    @property
    def external_region_id(self):
        """Gets the external_region_id of this FlavorMapping.  # noqa: E501

        The id of the region for which this mapping is defined.  # noqa: E501

        :return: The external_region_id of this FlavorMapping.  # noqa: E501
        :rtype: str
        """
        return self._external_region_id

    @external_region_id.setter
    def external_region_id(self, external_region_id):
        """Sets the external_region_id of this FlavorMapping.

        The id of the region for which this mapping is defined.  # noqa: E501

        :param external_region_id: The external_region_id of this FlavorMapping.  # noqa: E501
        :type: str
        """

        self._external_region_id = external_region_id

    @property
    def links(self):
        """Gets the links of this FlavorMapping.  # noqa: E501

        HATEOAS of the entity  # noqa: E501

        :return: The links of this FlavorMapping.  # noqa: E501
        :rtype: dict(str, Href)
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this FlavorMapping.

        HATEOAS of the entity  # noqa: E501

        :param links: The links of this FlavorMapping.  # noqa: E501
        :type: dict(str, Href)
        """
        if links is None:
            raise ValueError("Invalid value for `links`, must not be `None`")  # noqa: E501

        self._links = links

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FlavorMapping, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FlavorMapping):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
