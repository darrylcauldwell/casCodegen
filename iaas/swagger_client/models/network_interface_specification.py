# coding: utf-8

"""
    VMware Cloud Assembly IaaS API

    A multi-cloud IaaS API for Cloud Automation Services  # noqa: E501

    OpenAPI spec version: 2019-01-15
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class NetworkInterfaceSpecification(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'description': 'str',
        'device_index': 'int',
        'network_id': 'str',
        'addresses': 'list[str]',
        'security_group_ids': 'list[str]',
        'custom_properties': 'dict(str, str)'
    }

    attribute_map = {
        'name': 'name',
        'description': 'description',
        'device_index': 'deviceIndex',
        'network_id': 'networkId',
        'addresses': 'addresses',
        'security_group_ids': 'securityGroupIds',
        'custom_properties': 'customProperties'
    }

    def __init__(self, name=None, description=None, device_index=None, network_id=None, addresses=None, security_group_ids=None, custom_properties=None):  # noqa: E501
        """NetworkInterfaceSpecification - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._description = None
        self._device_index = None
        self._network_id = None
        self._addresses = None
        self._security_group_ids = None
        self._custom_properties = None
        self.discriminator = None
        if name is not None:
            self.name = name
        if description is not None:
            self.description = description
        if device_index is not None:
            self.device_index = device_index
        self.network_id = network_id
        if addresses is not None:
            self.addresses = addresses
        if security_group_ids is not None:
            self.security_group_ids = security_group_ids
        if custom_properties is not None:
            self.custom_properties = custom_properties

    @property
    def name(self):
        """Gets the name of this NetworkInterfaceSpecification.  # noqa: E501

        A human-friendly name used as an identifier in APIs that support this option.  # noqa: E501

        :return: The name of this NetworkInterfaceSpecification.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this NetworkInterfaceSpecification.

        A human-friendly name used as an identifier in APIs that support this option.  # noqa: E501

        :param name: The name of this NetworkInterfaceSpecification.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """Gets the description of this NetworkInterfaceSpecification.  # noqa: E501

        A human-friendly description.  # noqa: E501

        :return: The description of this NetworkInterfaceSpecification.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this NetworkInterfaceSpecification.

        A human-friendly description.  # noqa: E501

        :param description: The description of this NetworkInterfaceSpecification.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def device_index(self):
        """Gets the device_index of this NetworkInterfaceSpecification.  # noqa: E501

        The device index of this network interface.  # noqa: E501

        :return: The device_index of this NetworkInterfaceSpecification.  # noqa: E501
        :rtype: int
        """
        return self._device_index

    @device_index.setter
    def device_index(self, device_index):
        """Sets the device_index of this NetworkInterfaceSpecification.

        The device index of this network interface.  # noqa: E501

        :param device_index: The device_index of this NetworkInterfaceSpecification.  # noqa: E501
        :type: int
        """

        self._device_index = device_index

    @property
    def network_id(self):
        """Gets the network_id of this NetworkInterfaceSpecification.  # noqa: E501

        Id of the network instance that this network interface plugs into.  # noqa: E501

        :return: The network_id of this NetworkInterfaceSpecification.  # noqa: E501
        :rtype: str
        """
        return self._network_id

    @network_id.setter
    def network_id(self, network_id):
        """Sets the network_id of this NetworkInterfaceSpecification.

        Id of the network instance that this network interface plugs into.  # noqa: E501

        :param network_id: The network_id of this NetworkInterfaceSpecification.  # noqa: E501
        :type: str
        """
        if network_id is None:
            raise ValueError("Invalid value for `network_id`, must not be `None`")  # noqa: E501

        self._network_id = network_id

    @property
    def addresses(self):
        """Gets the addresses of this NetworkInterfaceSpecification.  # noqa: E501

        A list of IP addresses allocated or in use by this network interface.  # noqa: E501

        :return: The addresses of this NetworkInterfaceSpecification.  # noqa: E501
        :rtype: list[str]
        """
        return self._addresses

    @addresses.setter
    def addresses(self, addresses):
        """Sets the addresses of this NetworkInterfaceSpecification.

        A list of IP addresses allocated or in use by this network interface.  # noqa: E501

        :param addresses: The addresses of this NetworkInterfaceSpecification.  # noqa: E501
        :type: list[str]
        """

        self._addresses = addresses

    @property
    def security_group_ids(self):
        """Gets the security_group_ids of this NetworkInterfaceSpecification.  # noqa: E501

        A list of security group ids which this network interface will be assigned to.  # noqa: E501

        :return: The security_group_ids of this NetworkInterfaceSpecification.  # noqa: E501
        :rtype: list[str]
        """
        return self._security_group_ids

    @security_group_ids.setter
    def security_group_ids(self, security_group_ids):
        """Sets the security_group_ids of this NetworkInterfaceSpecification.

        A list of security group ids which this network interface will be assigned to.  # noqa: E501

        :param security_group_ids: The security_group_ids of this NetworkInterfaceSpecification.  # noqa: E501
        :type: list[str]
        """

        self._security_group_ids = security_group_ids

    @property
    def custom_properties(self):
        """Gets the custom_properties of this NetworkInterfaceSpecification.  # noqa: E501

        Additional properties that may be used to extend the base type.  # noqa: E501

        :return: The custom_properties of this NetworkInterfaceSpecification.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._custom_properties

    @custom_properties.setter
    def custom_properties(self, custom_properties):
        """Sets the custom_properties of this NetworkInterfaceSpecification.

        Additional properties that may be used to extend the base type.  # noqa: E501

        :param custom_properties: The custom_properties of this NetworkInterfaceSpecification.  # noqa: E501
        :type: dict(str, str)
        """

        self._custom_properties = custom_properties

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(NetworkInterfaceSpecification, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NetworkInterfaceSpecification):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
