# coding: utf-8

"""
    VMware Cloud Assembly IaaS API

    A multi-cloud IaaS API for Cloud Automation Services  # noqa: E501

    OpenAPI spec version: 2019-01-15
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from swagger_client.models.health_check_configuration import HealthCheckConfiguration  # noqa: F401,E501


class RouteConfiguration(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'protocol': 'str',
        'port': 'str',
        'member_protocol': 'str',
        'member_port': 'str',
        'health_check_configuration': 'HealthCheckConfiguration'
    }

    attribute_map = {
        'protocol': 'protocol',
        'port': 'port',
        'member_protocol': 'memberProtocol',
        'member_port': 'memberPort',
        'health_check_configuration': 'healthCheckConfiguration'
    }

    def __init__(self, protocol=None, port=None, member_protocol=None, member_port=None, health_check_configuration=None):  # noqa: E501
        """RouteConfiguration - a model defined in Swagger"""  # noqa: E501
        self._protocol = None
        self._port = None
        self._member_protocol = None
        self._member_port = None
        self._health_check_configuration = None
        self.discriminator = None
        self.protocol = protocol
        self.port = port
        self.member_protocol = member_protocol
        self.member_port = member_port
        if health_check_configuration is not None:
            self.health_check_configuration = health_check_configuration

    @property
    def protocol(self):
        """Gets the protocol of this RouteConfiguration.  # noqa: E501

        The protocol of the incoming load balancer requests.  # noqa: E501

        :return: The protocol of this RouteConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._protocol

    @protocol.setter
    def protocol(self, protocol):
        """Sets the protocol of this RouteConfiguration.

        The protocol of the incoming load balancer requests.  # noqa: E501

        :param protocol: The protocol of this RouteConfiguration.  # noqa: E501
        :type: str
        """
        if protocol is None:
            raise ValueError("Invalid value for `protocol`, must not be `None`")  # noqa: E501

        self._protocol = protocol

    @property
    def port(self):
        """Gets the port of this RouteConfiguration.  # noqa: E501

        Port which the load balancer is listening to.  # noqa: E501

        :return: The port of this RouteConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._port

    @port.setter
    def port(self, port):
        """Sets the port of this RouteConfiguration.

        Port which the load balancer is listening to.  # noqa: E501

        :param port: The port of this RouteConfiguration.  # noqa: E501
        :type: str
        """
        if port is None:
            raise ValueError("Invalid value for `port`, must not be `None`")  # noqa: E501

        self._port = port

    @property
    def member_protocol(self):
        """Gets the member_protocol of this RouteConfiguration.  # noqa: E501

        The protocol of the member traffic.  # noqa: E501

        :return: The member_protocol of this RouteConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._member_protocol

    @member_protocol.setter
    def member_protocol(self, member_protocol):
        """Sets the member_protocol of this RouteConfiguration.

        The protocol of the member traffic.  # noqa: E501

        :param member_protocol: The member_protocol of this RouteConfiguration.  # noqa: E501
        :type: str
        """
        if member_protocol is None:
            raise ValueError("Invalid value for `member_protocol`, must not be `None`")  # noqa: E501

        self._member_protocol = member_protocol

    @property
    def member_port(self):
        """Gets the member_port of this RouteConfiguration.  # noqa: E501

        Member port where the traffic is routed to.  # noqa: E501

        :return: The member_port of this RouteConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._member_port

    @member_port.setter
    def member_port(self, member_port):
        """Sets the member_port of this RouteConfiguration.

        Member port where the traffic is routed to.  # noqa: E501

        :param member_port: The member_port of this RouteConfiguration.  # noqa: E501
        :type: str
        """
        if member_port is None:
            raise ValueError("Invalid value for `member_port`, must not be `None`")  # noqa: E501

        self._member_port = member_port

    @property
    def health_check_configuration(self):
        """Gets the health_check_configuration of this RouteConfiguration.  # noqa: E501


        :return: The health_check_configuration of this RouteConfiguration.  # noqa: E501
        :rtype: HealthCheckConfiguration
        """
        return self._health_check_configuration

    @health_check_configuration.setter
    def health_check_configuration(self, health_check_configuration):
        """Sets the health_check_configuration of this RouteConfiguration.


        :param health_check_configuration: The health_check_configuration of this RouteConfiguration.  # noqa: E501
        :type: HealthCheckConfiguration
        """

        self._health_check_configuration = health_check_configuration

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RouteConfiguration, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RouteConfiguration):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
